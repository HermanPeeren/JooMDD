/*
 * generated by iCampus (JooMDD team) 2.9.1
 */
package de.thm.icampus.joomdd.ejsl.serializer;

import com.google.inject.Inject;
import de.thm.icampus.joomdd.ejsl.eJSL.Attribute;
import de.thm.icampus.joomdd.ejsl.eJSL.Author;
import de.thm.icampus.joomdd.ejsl.eJSL.BackendSection;
import de.thm.icampus.joomdd.ejsl.eJSL.ComplexHTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.Component;
import de.thm.icampus.joomdd.ejsl.eJSL.ContextLink;
import de.thm.icampus.joomdd.ejsl.eJSL.CssBlock;
import de.thm.icampus.joomdd.ejsl.eJSL.Datapackage;
import de.thm.icampus.joomdd.ejsl.eJSL.Datatype;
import de.thm.icampus.joomdd.ejsl.eJSL.DatatypeReference;
import de.thm.icampus.joomdd.ejsl.eJSL.DetailPageField;
import de.thm.icampus.joomdd.ejsl.eJSL.DetailsPage;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLPackage;
import de.thm.icampus.joomdd.ejsl.eJSL.Entity;
import de.thm.icampus.joomdd.ejsl.eJSL.ExtensionPackage;
import de.thm.icampus.joomdd.ejsl.eJSL.ExternalLink;
import de.thm.icampus.joomdd.ejsl.eJSL.FrontendSection;
import de.thm.icampus.joomdd.ejsl.eJSL.IndexPage;
import de.thm.icampus.joomdd.ejsl.eJSL.InternalLink;
import de.thm.icampus.joomdd.ejsl.eJSL.KeyValuePair;
import de.thm.icampus.joomdd.ejsl.eJSL.Language;
import de.thm.icampus.joomdd.ejsl.eJSL.Library;
import de.thm.icampus.joomdd.ejsl.eJSL.LinkParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Manifestation;
import de.thm.icampus.joomdd.ejsl.eJSL.Method;
import de.thm.icampus.joomdd.ejsl.eJSL.MethodParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Module;
import de.thm.icampus.joomdd.ejsl.eJSL.PageReference;
import de.thm.icampus.joomdd.ejsl.eJSL.ParameterGroup;
import de.thm.icampus.joomdd.ejsl.eJSL.Plugin;
import de.thm.icampus.joomdd.ejsl.eJSL.Position;
import de.thm.icampus.joomdd.ejsl.eJSL.PositionParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Reference;
import de.thm.icampus.joomdd.ejsl.eJSL.SimpleHTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.StandardTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.StaticPage;
import de.thm.icampus.joomdd.ejsl.eJSL.Template;
import de.thm.icampus.joomdd.ejsl.services.EJSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EJSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EJSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EJSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EJSLPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case EJSLPackage.AUTHOR:
				sequence_Author(context, (Author) semanticObject); 
				return; 
			case EJSLPackage.BACKEND_SECTION:
				sequence_Backend(context, (BackendSection) semanticObject); 
				return; 
			case EJSLPackage.CLASS:
				sequence_Class(context, (de.thm.icampus.joomdd.ejsl.eJSL.Class) semanticObject); 
				return; 
			case EJSLPackage.COMPLEX_HTML_TYPES:
				sequence_ComplexHTMLTypes(context, (ComplexHTMLTypes) semanticObject); 
				return; 
			case EJSLPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case EJSLPackage.CONTEXT_LINK:
				sequence_ContextLink(context, (ContextLink) semanticObject); 
				return; 
			case EJSLPackage.CSS_BLOCK:
				sequence_CssBlock(context, (CssBlock) semanticObject); 
				return; 
			case EJSLPackage.DATAPACKAGE:
				sequence_Datapackage(context, (Datapackage) semanticObject); 
				return; 
			case EJSLPackage.DATATYPE:
				sequence_Datatype(context, (Datatype) semanticObject); 
				return; 
			case EJSLPackage.DATATYPE_REFERENCE:
				sequence_DatatypeReference(context, (DatatypeReference) semanticObject); 
				return; 
			case EJSLPackage.DETAIL_PAGE_FIELD:
				sequence_DetailPageField(context, (DetailPageField) semanticObject); 
				return; 
			case EJSLPackage.DETAILS_PAGE:
				sequence_DetailsPage(context, (DetailsPage) semanticObject); 
				return; 
			case EJSLPackage.EJSL_MODEL:
				sequence_EJSLModel(context, (EJSLModel) semanticObject); 
				return; 
			case EJSLPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case EJSLPackage.EXTENSION_PACKAGE:
				sequence_ExtensionPackage(context, (ExtensionPackage) semanticObject); 
				return; 
			case EJSLPackage.EXTERNAL_LINK:
				sequence_ExternalLink(context, (ExternalLink) semanticObject); 
				return; 
			case EJSLPackage.FRONTEND_SECTION:
				sequence_Frontend(context, (FrontendSection) semanticObject); 
				return; 
			case EJSLPackage.INDEX_PAGE:
				sequence_IndexPage(context, (IndexPage) semanticObject); 
				return; 
			case EJSLPackage.INTERNAL_LINK:
				sequence_InternalLink(context, (InternalLink) semanticObject); 
				return; 
			case EJSLPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case EJSLPackage.LANGUAGE:
				sequence_Language(context, (Language) semanticObject); 
				return; 
			case EJSLPackage.LIBRARY:
				sequence_Library(context, (Library) semanticObject); 
				return; 
			case EJSLPackage.LINK_PARAMETER:
				sequence_LinkParameter(context, (LinkParameter) semanticObject); 
				return; 
			case EJSLPackage.MANIFESTATION:
				sequence_Manifestation(context, (Manifestation) semanticObject); 
				return; 
			case EJSLPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case EJSLPackage.METHOD_PARAMETER:
				sequence_MethodParameter(context, (MethodParameter) semanticObject); 
				return; 
			case EJSLPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case EJSLPackage.PACKAGE:
				sequence_Package(context, (de.thm.icampus.joomdd.ejsl.eJSL.Package) semanticObject); 
				return; 
			case EJSLPackage.PAGE_REFERENCE:
				sequence_PageReference(context, (PageReference) semanticObject); 
				return; 
			case EJSLPackage.PARAMETER:
				sequence_Parameter(context, (de.thm.icampus.joomdd.ejsl.eJSL.Parameter) semanticObject); 
				return; 
			case EJSLPackage.PARAMETER_GROUP:
				sequence_ParameterGroup(context, (ParameterGroup) semanticObject); 
				return; 
			case EJSLPackage.PLUGIN:
				sequence_Plugin(context, (Plugin) semanticObject); 
				return; 
			case EJSLPackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			case EJSLPackage.POSITION_PARAMETER:
				sequence_PositionParameter(context, (PositionParameter) semanticObject); 
				return; 
			case EJSLPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case EJSLPackage.SIMPLE_HTML_TYPES:
				sequence_SimpleHTMLTypes(context, (SimpleHTMLTypes) semanticObject); 
				return; 
			case EJSLPackage.STANDARD_TYPES:
				sequence_StandardTypes(context, (StandardTypes) semanticObject); 
				return; 
			case EJSLPackage.STATIC_PAGE:
				sequence_StaticPage(context, (StaticPage) semanticObject); 
				return; 
			case EJSLPackage.TEMPLATE:
				sequence_Template(context, (Template) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=MYID type=Type (isunique?='Unique attribute' withattribute?=[null|QualifiedName]?)?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Author returns Author
	 *
	 * Constraint:
	 *     (name=STRING authoremail=STRING? authorurl=STRING?)
	 */
	protected void sequence_Author(ISerializationContext context, Author semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns BackendSection
	 *     Backend returns BackendSection
	 *
	 * Constraint:
	 *     pageRef+=PageReference*
	 */
	protected void sequence_Backend(ISerializationContext context, BackendSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         supertype=[Class|QualifiedName]? 
	 *         (references+=[Class|QualifiedName] references+=[Class|QualifiedName]*)? 
	 *         (entities+=[Entity|STRING] entities+=[Entity|STRING]*)? 
	 *         methods+=Method*
	 *     )
	 */
	protected void sequence_Class(ISerializationContext context, de.thm.icampus.joomdd.ejsl.eJSL.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HTMLTypes returns ComplexHTMLTypes
	 *     ComplexHTMLTypes returns ComplexHTMLTypes
	 *
	 * Constraint:
	 *     (htmltype=ComplexHTMLTypeKinds keyvaluepairs+=KeyValuePair keyvaluepairs+=KeyValuePair*)
	 */
	protected void sequence_ComplexHTMLTypes(ISerializationContext context, ComplexHTMLTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=MYID manifest=Manifestation globalParamter+=ParameterGroup* languages+=Language* sections+=Section+)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns ContextLink
	 *     InternalLink returns ContextLink
	 *     ContextLink returns ContextLink
	 *
	 * Constraint:
	 *     (name=MYID target=[Page|QualifiedName] linkedAttribute=[Attribute|QualifiedName] linkparameters+=LinkParameter*)
	 */
	protected void sequence_ContextLink(ISerializationContext context, ContextLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CssBlock returns CssBlock
	 *
	 * Constraint:
	 *     (selector=STRING keyvaluepairs+=KeyValuePair*)
	 */
	protected void sequence_CssBlock(ISerializationContext context, CssBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Datapackage returns Datapackage
	 *
	 * Constraint:
	 *     (name=ID datapackages+=Datapackage* entities+=Entity* datatypes+=Datatype*)
	 */
	protected void sequence_Datapackage(ISerializationContext context, Datapackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns DatatypeReference
	 *     DatatypeReference returns DatatypeReference
	 *
	 * Constraint:
	 *     type=[Datatype|STRING]
	 */
	protected void sequence_DatatypeReference(ISerializationContext context, DatatypeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.DATATYPE_REFERENCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.DATATYPE_REFERENCE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatatypeReferenceAccess().getTypeDatatypeSTRINGTerminalRuleCall_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Datatype returns Datatype
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Datatype(ISerializationContext context, Datatype semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.DATATYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.DATATYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatatypeAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DetailPageField returns DetailPageField
	 *
	 * Constraint:
	 *     (attribute=[Attribute|QualifiedName] htmltype=HTMLTypes)
	 */
	protected void sequence_DetailPageField(ISerializationContext context, DetailPageField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.DETAIL_PAGE_FIELD__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.DETAIL_PAGE_FIELD__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.DETAIL_PAGE_FIELD__HTMLTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.DETAIL_PAGE_FIELD__HTMLTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDetailPageFieldAccess().getAttributeAttributeQualifiedNameParserRuleCall_1_0_1(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getDetailPageFieldAccess().getHtmltypeHTMLTypesParserRuleCall_3_0(), semanticObject.getHtmltype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Page returns DetailsPage
	 *     DynamicPage returns DetailsPage
	 *     DetailsPage returns DetailsPage
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         (entities+=[Entity|QualifiedName] entities+=[Entity|QualifiedName]*)? 
	 *         editfields+=DetailPageField* 
	 *         (parametergroups+=[ParameterGroup|ID] parametergroups+=[ParameterGroup|ID]*)? 
	 *         (globalparameters+=[Parameter|ID] globalparameters+=[Parameter|ID]*)? 
	 *         localparameters+=Parameter* 
	 *         (tablecolumns+=[Attribute|QualifiedName] tablecolumns+=[Attribute|QualifiedName]*)? 
	 *         (filters+=[Attribute|QualifiedName] filters+=[Attribute|QualifiedName]*)? 
	 *         links+=Link*
	 *     )
	 */
	protected void sequence_DetailsPage(ISerializationContext context, DetailsPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EJSLModel returns EJSLModel
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         (datatypes+=Datatype datatypes+=Datatype*)? 
	 *         globalparameters+=Parameter* 
	 *         parametergroups+=ParameterGroup* 
	 *         entities+=Entity* 
	 *         datapackages+=Datapackage* 
	 *         pages+=Page* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_EJSLModel(ISerializationContext context, EJSLModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=MYID supertype=[Entity|QualifiedName]? attributes+=Attribute* references+=Reference*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns ExtensionPackage
	 *     ExtensionPackage returns ExtensionPackage
	 *
	 * Constraint:
	 *     (name=MYID manifest=Manifestation languages+=Language* extensions+=Extension+)
	 */
	protected void sequence_ExtensionPackage(ISerializationContext context, ExtensionPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns ExternalLink
	 *     ExternalLink returns ExternalLink
	 *
	 * Constraint:
	 *     (target=STRING linkedAttribute=[Attribute|QualifiedName] label=STRING?)
	 */
	protected void sequence_ExternalLink(ISerializationContext context, ExternalLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns FrontendSection
	 *     Frontend returns FrontendSection
	 *
	 * Constraint:
	 *     pageRef+=PageReference*
	 */
	protected void sequence_Frontend(ISerializationContext context, FrontendSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns IndexPage
	 *     DynamicPage returns IndexPage
	 *     IndexPage returns IndexPage
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         (entities+=[Entity|QualifiedName] entities+=[Entity|QualifiedName]*)? 
	 *         (parametergroups+=[ParameterGroup|ID] parametergroups+=[ParameterGroup|ID]*)? 
	 *         (globalparameters+=[Parameter|ID] globalparameters+=[Parameter|ID]*)? 
	 *         localparameters+=Parameter* 
	 *         (tablecolumns+=[Attribute|QualifiedName] tablecolumns+=[Attribute|QualifiedName]*)? 
	 *         (filters+=[Attribute|QualifiedName] filters+=[Attribute|QualifiedName]*)? 
	 *         links+=Link*
	 *     )
	 */
	protected void sequence_IndexPage(ISerializationContext context, IndexPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns InternalLink
	 *     InternalLink returns InternalLink
	 *
	 * Constraint:
	 *     (name=MYID target=[Page|QualifiedName] linkedAttribute=[Attribute|QualifiedName])
	 */
	protected void sequence_InternalLink(ISerializationContext context, InternalLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.INTERNAL_LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.INTERNAL_LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.INTERNAL_LINK__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.INTERNAL_LINK__TARGET));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.LINK__LINKED_ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.LINK__LINKED_ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInternalLinkAccess().getNameMYIDParserRuleCall_0_1_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInternalLinkAccess().getTargetPageQualifiedNameParserRuleCall_0_1_5_0_1(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getInternalLinkAccess().getLinkedAttributeAttributeQualifiedNameParserRuleCall_0_1_8_0_1(), semanticObject.getLinkedAttribute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.KEY_VALUE_PAIR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.KEY_VALUE_PAIR__NAME));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Language returns Language
	 *
	 * Constraint:
	 *     (name=LANGUAGE_CODE keyvaluepairs+=KeyValuePair*)
	 */
	protected void sequence_Language(ISerializationContext context, Language semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Library
	 *     Library returns Library
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         manifest=Manifestation 
	 *         languages+=Language* 
	 *         (entities+=[Entity|STRING] entities+=[Entity|STRING]*)? 
	 *         classes+=Class* 
	 *         packages+=Package*
	 *     )
	 */
	protected void sequence_Library(ISerializationContext context, Library semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkParameter returns LinkParameter
	 *
	 * Constraint:
	 *     (name=MYID (attvalue=[Attribute|STRING] | value=STRING))
	 */
	protected void sequence_LinkParameter(ISerializationContext context, LinkParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Manifestation returns Manifestation
	 *
	 * Constraint:
	 *     (
	 *         authors+=Author+ 
	 *         creationdate=DATE? 
	 *         copyright=STRING? 
	 *         license=STRING? 
	 *         link=STRING? 
	 *         version=STRING? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Manifestation(ISerializationContext context, Manifestation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodParameter returns MethodParameter
	 *
	 * Constraint:
	 *     (name=ID type=Type)
	 */
	protected void sequence_MethodParameter(ISerializationContext context, MethodParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.METHOD_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.METHOD_PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.METHOD_PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.METHOD_PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMethodParameterAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMethodParameterAccess().getTypeTypeParserRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (name=MYID (returnvalue=ID type=Type)? methodparameters+=MethodParameter*)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Module
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (name=MYID manifest=Manifestation languages+=Language* pageRef=PageReference?)
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=MYID packages+=Package* classes+=Class*)
	 */
	protected void sequence_Package(ISerializationContext context, de.thm.icampus.joomdd.ejsl.eJSL.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PageReference returns PageReference
	 *
	 * Constraint:
	 *     (page=[Page|QualifiedName] (pagescr=[Component|QualifiedName] sect=SectionReference)?)
	 */
	protected void sequence_PageReference(ISerializationContext context, PageReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterGroup returns ParameterGroup
	 *
	 * Constraint:
	 *     (name=ID label=STRING? (globalparameters+=[Parameter|ID] | parameters+=Parameter)*)
	 */
	protected void sequence_ParameterGroup(ISerializationContext context, ParameterGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         dtype=Type 
	 *         defaultvalue=STRING? 
	 *         label=STRING? 
	 *         size=INT? 
	 *         descripton=STRING?
	 *     )
	 */
	protected void sequence_Parameter(ISerializationContext context, de.thm.icampus.joomdd.ejsl.eJSL.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Plugin
	 *     Plugin returns Plugin
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         manifest=Manifestation 
	 *         type=PluginKinds 
	 *         languages+=Language* 
	 *         (entities+=[Entity|STRING] entities+=[Entity|STRING]*)? 
	 *         localparameters+=Parameter*
	 *     )
	 */
	protected void sequence_Plugin(ISerializationContext context, Plugin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositionParameter returns PositionParameter
	 *
	 * Constraint:
	 *     (name=ID divid=ID? type=POSITION_TYPES_NAMES? keyvaluepairs+=KeyValuePair*)
	 */
	protected void sequence_PositionParameter(ISerializationContext context, PositionParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Position returns Position
	 *
	 * Constraint:
	 *     ((name=POSITION_TYPES | name=ID) positionparameters+=PositionParameter*)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (attribute=[Attribute|QualifiedName] entity=[Entity|QualifiedName] attributerefereced=[Attribute|QualifiedName] lower=NUMBER upper=NUMBER)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.REFERENCE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.REFERENCE__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.REFERENCE__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.REFERENCE__ENTITY));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.REFERENCE__ATTRIBUTEREFERECED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.REFERENCE__ATTRIBUTEREFERECED));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.REFERENCE__LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.REFERENCE__LOWER));
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.REFERENCE__UPPER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.REFERENCE__UPPER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getAttributeAttributeQualifiedNameParserRuleCall_5_0_1(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getReferenceAccess().getEntityEntityQualifiedNameParserRuleCall_8_0_1(), semanticObject.getEntity());
		feeder.accept(grammarAccess.getReferenceAccess().getAttributereferecedAttributeQualifiedNameParserRuleCall_11_0_1(), semanticObject.getAttributerefereced());
		feeder.accept(grammarAccess.getReferenceAccess().getLowerNUMBERParserRuleCall_14_0(), semanticObject.getLower());
		feeder.accept(grammarAccess.getReferenceAccess().getUpperNUMBERParserRuleCall_17_0(), semanticObject.getUpper());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HTMLTypes returns SimpleHTMLTypes
	 *     SimpleHTMLTypes returns SimpleHTMLTypes
	 *
	 * Constraint:
	 *     htmltype=SimpleHTMLTypeKinds
	 */
	protected void sequence_SimpleHTMLTypes(ISerializationContext context, SimpleHTMLTypes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EJSLPackage.Literals.SIMPLE_HTML_TYPES__HTMLTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EJSLPackage.Literals.SIMPLE_HTML_TYPES__HTMLTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleHTMLTypesAccess().getHtmltypeSimpleHTMLTypeKindsEnumRuleCall_0(), semanticObject.getHtmltype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns StandardTypes
	 *     StandardTypes returns StandardTypes
	 *
	 * Constraint:
	 *     (type=StandardTypeKinds notnull?='Not Null'? default?=STRING? autoincrement?='Auto Increment'?)
	 */
	protected void sequence_StandardTypes(ISerializationContext context, StandardTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns StaticPage
	 *     StaticPage returns StaticPage
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         (parametergroups+=[ParameterGroup|ID] parametergroups+=[ParameterGroup|ID]*)? 
	 *         (globalparameters+=[Parameter|ID] globalparameters+=[Parameter|ID]*)? 
	 *         localparameters+=Parameter* 
	 *         links+=Link* 
	 *         HTMLBody=STRING
	 *     )
	 */
	protected void sequence_StaticPage(ISerializationContext context, StaticPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Template
	 *     Template returns Template
	 *
	 * Constraint:
	 *     (
	 *         name=MYID 
	 *         manifest=Manifestation 
	 *         languages+=Language* 
	 *         localparameters+=Parameter* 
	 *         positions+=Position* 
	 *         cssblocks+=CssBlock*
	 *     )
	 */
	protected void sequence_Template(ISerializationContext context, Template semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
