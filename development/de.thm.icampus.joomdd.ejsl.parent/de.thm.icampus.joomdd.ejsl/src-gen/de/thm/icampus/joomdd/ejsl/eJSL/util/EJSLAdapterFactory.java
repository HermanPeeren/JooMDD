/**
 * generated by iCampus (JooMDD team) 2.9.1
 */
package de.thm.icampus.joomdd.ejsl.eJSL.util;

import de.thm.icampus.joomdd.ejsl.eJSL.Attribute;
import de.thm.icampus.joomdd.ejsl.eJSL.Author;
import de.thm.icampus.joomdd.ejsl.eJSL.BackendSection;
import de.thm.icampus.joomdd.ejsl.eJSL.CMSCore;
import de.thm.icampus.joomdd.ejsl.eJSL.CMSExtension;
import de.thm.icampus.joomdd.ejsl.eJSL.ComplexHTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.Component;
import de.thm.icampus.joomdd.ejsl.eJSL.ContextLink;
import de.thm.icampus.joomdd.ejsl.eJSL.CssBlock;
import de.thm.icampus.joomdd.ejsl.eJSL.CustomPage;
import de.thm.icampus.joomdd.ejsl.eJSL.Datatype;
import de.thm.icampus.joomdd.ejsl.eJSL.DatatypeReference;
import de.thm.icampus.joomdd.ejsl.eJSL.DetailPageField;
import de.thm.icampus.joomdd.ejsl.eJSL.DetailsPage;
import de.thm.icampus.joomdd.ejsl.eJSL.DynamicPage;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLPackage;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLPart;
import de.thm.icampus.joomdd.ejsl.eJSL.Entity;
import de.thm.icampus.joomdd.ejsl.eJSL.Entitypackage;
import de.thm.icampus.joomdd.ejsl.eJSL.Extension;
import de.thm.icampus.joomdd.ejsl.eJSL.ExtensionPackage;
import de.thm.icampus.joomdd.ejsl.eJSL.ExternalLink;
import de.thm.icampus.joomdd.ejsl.eJSL.Feature;
import de.thm.icampus.joomdd.ejsl.eJSL.FrontendSection;
import de.thm.icampus.joomdd.ejsl.eJSL.HTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.IndexPage;
import de.thm.icampus.joomdd.ejsl.eJSL.InternalLink;
import de.thm.icampus.joomdd.ejsl.eJSL.KeyValuePair;
import de.thm.icampus.joomdd.ejsl.eJSL.Language;
import de.thm.icampus.joomdd.ejsl.eJSL.Library;
import de.thm.icampus.joomdd.ejsl.eJSL.Link;
import de.thm.icampus.joomdd.ejsl.eJSL.LinkParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Manifestation;
import de.thm.icampus.joomdd.ejsl.eJSL.Method;
import de.thm.icampus.joomdd.ejsl.eJSL.MethodParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Module;
import de.thm.icampus.joomdd.ejsl.eJSL.Page;
import de.thm.icampus.joomdd.ejsl.eJSL.PageAction;
import de.thm.icampus.joomdd.ejsl.eJSL.PageReference;
import de.thm.icampus.joomdd.ejsl.eJSL.Parameter;
import de.thm.icampus.joomdd.ejsl.eJSL.ParameterGroup;
import de.thm.icampus.joomdd.ejsl.eJSL.Plugin;
import de.thm.icampus.joomdd.ejsl.eJSL.Position;
import de.thm.icampus.joomdd.ejsl.eJSL.PositionParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Reference;
import de.thm.icampus.joomdd.ejsl.eJSL.Section;
import de.thm.icampus.joomdd.ejsl.eJSL.SimpleHTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.StandardTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.StaticPage;
import de.thm.icampus.joomdd.ejsl.eJSL.Template;
import de.thm.icampus.joomdd.ejsl.eJSL.Type;
import de.thm.icampus.joomdd.ejsl.eJSL.coreFeature;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.thm.icampus.joomdd.ejsl.eJSL.EJSLPackage
 * @generated
 */
public class EJSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EJSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EJSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = EJSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EJSLSwitch<Adapter> modelSwitch =
    new EJSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseEJSLModel(EJSLModel object)
      {
        return createEJSLModelAdapter();
      }
      @Override
      public Adapter caseEJSLPart(EJSLPart object)
      {
        return createEJSLPartAdapter();
      }
      @Override
      public Adapter caseCMSCore(CMSCore object)
      {
        return createCMSCoreAdapter();
      }
      @Override
      public Adapter casecoreFeature(coreFeature object)
      {
        return createcoreFeatureAdapter();
      }
      @Override
      public Adapter caseCMSExtension(CMSExtension object)
      {
        return createCMSExtensionAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseDatatypeReference(DatatypeReference object)
      {
        return createDatatypeReferenceAdapter();
      }
      @Override
      public Adapter caseStandardTypes(StandardTypes object)
      {
        return createStandardTypesAdapter();
      }
      @Override
      public Adapter caseDatatype(Datatype object)
      {
        return createDatatypeAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseParameterGroup(ParameterGroup object)
      {
        return createParameterGroupAdapter();
      }
      @Override
      public Adapter casePageAction(PageAction object)
      {
        return createPageActionAdapter();
      }
      @Override
      public Adapter caseEntitypackage(Entitypackage object)
      {
        return createEntitypackageAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseReference(Reference object)
      {
        return createReferenceAdapter();
      }
      @Override
      public Adapter casePage(Page object)
      {
        return createPageAdapter();
      }
      @Override
      public Adapter caseStaticPage(StaticPage object)
      {
        return createStaticPageAdapter();
      }
      @Override
      public Adapter caseDynamicPage(DynamicPage object)
      {
        return createDynamicPageAdapter();
      }
      @Override
      public Adapter caseIndexPage(IndexPage object)
      {
        return createIndexPageAdapter();
      }
      @Override
      public Adapter caseDetailsPage(DetailsPage object)
      {
        return createDetailsPageAdapter();
      }
      @Override
      public Adapter caseDetailPageField(DetailPageField object)
      {
        return createDetailPageFieldAdapter();
      }
      @Override
      public Adapter caseCustomPage(CustomPage object)
      {
        return createCustomPageAdapter();
      }
      @Override
      public Adapter caseHTMLTypes(HTMLTypes object)
      {
        return createHTMLTypesAdapter();
      }
      @Override
      public Adapter caseSimpleHTMLTypes(SimpleHTMLTypes object)
      {
        return createSimpleHTMLTypesAdapter();
      }
      @Override
      public Adapter caseComplexHTMLTypes(ComplexHTMLTypes object)
      {
        return createComplexHTMLTypesAdapter();
      }
      @Override
      public Adapter caseLink(Link object)
      {
        return createLinkAdapter();
      }
      @Override
      public Adapter caseExternalLink(ExternalLink object)
      {
        return createExternalLinkAdapter();
      }
      @Override
      public Adapter caseInternalLink(InternalLink object)
      {
        return createInternalLinkAdapter();
      }
      @Override
      public Adapter caseContextLink(ContextLink object)
      {
        return createContextLinkAdapter();
      }
      @Override
      public Adapter caseLinkParameter(LinkParameter object)
      {
        return createLinkParameterAdapter();
      }
      @Override
      public Adapter caseExtension(Extension object)
      {
        return createExtensionAdapter();
      }
      @Override
      public Adapter caseExtensionPackage(ExtensionPackage object)
      {
        return createExtensionPackageAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseSection(Section object)
      {
        return createSectionAdapter();
      }
      @Override
      public Adapter caseBackendSection(BackendSection object)
      {
        return createBackendSectionAdapter();
      }
      @Override
      public Adapter casePageReference(PageReference object)
      {
        return createPageReferenceAdapter();
      }
      @Override
      public Adapter caseFrontendSection(FrontendSection object)
      {
        return createFrontendSectionAdapter();
      }
      @Override
      public Adapter caseModule(Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter casePlugin(Plugin object)
      {
        return createPluginAdapter();
      }
      @Override
      public Adapter caseLibrary(Library object)
      {
        return createLibraryAdapter();
      }
      @Override
      public Adapter casePackage(de.thm.icampus.joomdd.ejsl.eJSL.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseClass(de.thm.icampus.joomdd.ejsl.eJSL.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseMethodParameter(MethodParameter object)
      {
        return createMethodParameterAdapter();
      }
      @Override
      public Adapter caseTemplate(Template object)
      {
        return createTemplateAdapter();
      }
      @Override
      public Adapter caseManifestation(Manifestation object)
      {
        return createManifestationAdapter();
      }
      @Override
      public Adapter caseAuthor(Author object)
      {
        return createAuthorAdapter();
      }
      @Override
      public Adapter caseLanguage(Language object)
      {
        return createLanguageAdapter();
      }
      @Override
      public Adapter caseKeyValuePair(KeyValuePair object)
      {
        return createKeyValuePairAdapter();
      }
      @Override
      public Adapter casePosition(Position object)
      {
        return createPositionAdapter();
      }
      @Override
      public Adapter casePositionParameter(PositionParameter object)
      {
        return createPositionParameterAdapter();
      }
      @Override
      public Adapter caseCssBlock(CssBlock object)
      {
        return createCssBlockAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel
   * @generated
   */
  public Adapter createEJSLModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.EJSLPart <em>Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.EJSLPart
   * @generated
   */
  public Adapter createEJSLPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.CMSCore <em>CMS Core</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.CMSCore
   * @generated
   */
  public Adapter createCMSCoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.coreFeature <em>core Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.coreFeature
   * @generated
   */
  public Adapter createcoreFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.CMSExtension <em>CMS Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.CMSExtension
   * @generated
   */
  public Adapter createCMSExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.DatatypeReference <em>Datatype Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.DatatypeReference
   * @generated
   */
  public Adapter createDatatypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.StandardTypes <em>Standard Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.StandardTypes
   * @generated
   */
  public Adapter createStandardTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Datatype <em>Datatype</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Datatype
   * @generated
   */
  public Adapter createDatatypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.ParameterGroup <em>Parameter Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.ParameterGroup
   * @generated
   */
  public Adapter createParameterGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.PageAction <em>Page Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.PageAction
   * @generated
   */
  public Adapter createPageActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Entitypackage <em>Entitypackage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Entitypackage
   * @generated
   */
  public Adapter createEntitypackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Reference
   * @generated
   */
  public Adapter createReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Page <em>Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Page
   * @generated
   */
  public Adapter createPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.StaticPage <em>Static Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.StaticPage
   * @generated
   */
  public Adapter createStaticPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.DynamicPage <em>Dynamic Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.DynamicPage
   * @generated
   */
  public Adapter createDynamicPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.IndexPage <em>Index Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.IndexPage
   * @generated
   */
  public Adapter createIndexPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.DetailsPage <em>Details Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.DetailsPage
   * @generated
   */
  public Adapter createDetailsPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.DetailPageField <em>Detail Page Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.DetailPageField
   * @generated
   */
  public Adapter createDetailPageFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.CustomPage <em>Custom Page</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.CustomPage
   * @generated
   */
  public Adapter createCustomPageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.HTMLTypes <em>HTML Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.HTMLTypes
   * @generated
   */
  public Adapter createHTMLTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.SimpleHTMLTypes <em>Simple HTML Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.SimpleHTMLTypes
   * @generated
   */
  public Adapter createSimpleHTMLTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.ComplexHTMLTypes <em>Complex HTML Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.ComplexHTMLTypes
   * @generated
   */
  public Adapter createComplexHTMLTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Link <em>Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Link
   * @generated
   */
  public Adapter createLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.ExternalLink <em>External Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.ExternalLink
   * @generated
   */
  public Adapter createExternalLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.InternalLink <em>Internal Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.InternalLink
   * @generated
   */
  public Adapter createInternalLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.ContextLink <em>Context Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.ContextLink
   * @generated
   */
  public Adapter createContextLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.LinkParameter <em>Link Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.LinkParameter
   * @generated
   */
  public Adapter createLinkParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Extension <em>Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Extension
   * @generated
   */
  public Adapter createExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.ExtensionPackage <em>Extension Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.ExtensionPackage
   * @generated
   */
  public Adapter createExtensionPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Section <em>Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Section
   * @generated
   */
  public Adapter createSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.BackendSection <em>Backend Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.BackendSection
   * @generated
   */
  public Adapter createBackendSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.PageReference <em>Page Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.PageReference
   * @generated
   */
  public Adapter createPageReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.FrontendSection <em>Frontend Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.FrontendSection
   * @generated
   */
  public Adapter createFrontendSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Plugin <em>Plugin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Plugin
   * @generated
   */
  public Adapter createPluginAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Library <em>Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Library
   * @generated
   */
  public Adapter createLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.MethodParameter <em>Method Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.MethodParameter
   * @generated
   */
  public Adapter createMethodParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Template <em>Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Template
   * @generated
   */
  public Adapter createTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Manifestation <em>Manifestation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Manifestation
   * @generated
   */
  public Adapter createManifestationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Author <em>Author</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Author
   * @generated
   */
  public Adapter createAuthorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Language <em>Language</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Language
   * @generated
   */
  public Adapter createLanguageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.KeyValuePair <em>Key Value Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.KeyValuePair
   * @generated
   */
  public Adapter createKeyValuePairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.Position <em>Position</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.Position
   * @generated
   */
  public Adapter createPositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.PositionParameter <em>Position Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.PositionParameter
   * @generated
   */
  public Adapter createPositionParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.thm.icampus.joomdd.ejsl.eJSL.CssBlock <em>Css Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.thm.icampus.joomdd.ejsl.eJSL.CssBlock
   * @generated
   */
  public Adapter createCssBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //EJSLAdapterFactory
