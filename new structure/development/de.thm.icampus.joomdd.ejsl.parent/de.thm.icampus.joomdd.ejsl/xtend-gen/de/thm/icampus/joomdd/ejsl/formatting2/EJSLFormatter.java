/**
 * generated by iCampus (JooMDD team) 2.9.1
 */
package de.thm.icampus.joomdd.ejsl.formatting2;

import com.google.inject.Inject;
import de.thm.icampus.joomdd.ejsl.eJSL.Datapackage;
import de.thm.icampus.joomdd.ejsl.eJSL.Datatype;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel;
import de.thm.icampus.joomdd.ejsl.eJSL.Entity;
import de.thm.icampus.joomdd.ejsl.eJSL.Page;
import de.thm.icampus.joomdd.ejsl.eJSL.Parameter;
import de.thm.icampus.joomdd.ejsl.eJSL.ParameterGroup;
import de.thm.icampus.joomdd.ejsl.eJSL.Type;
import de.thm.icampus.joomdd.ejsl.services.EJSLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class EJSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EJSLGrammarAccess _eJSLGrammarAccess;
  
  protected void _format(final EJSLModel eJSLModel, @Extension final IFormattableDocument document) {
    EList<Datatype> _datatypes = eJSLModel.getDatatypes();
    for (final Datatype datatypes : _datatypes) {
      document.<Datatype>format(datatypes);
    }
    EList<Parameter> _globalparameters = eJSLModel.getGlobalparameters();
    for (final Parameter globalparameters : _globalparameters) {
      document.<Parameter>format(globalparameters);
    }
    EList<ParameterGroup> _parametergroups = eJSLModel.getParametergroups();
    for (final ParameterGroup parametergroups : _parametergroups) {
      document.<ParameterGroup>format(parametergroups);
    }
    EList<Entity> _entities = eJSLModel.getEntities();
    for (final Entity entities : _entities) {
      document.<Entity>format(entities);
    }
    EList<Datapackage> _datapackages = eJSLModel.getDatapackages();
    for (final Datapackage datapackages : _datapackages) {
      document.<Datapackage>format(datapackages);
    }
    EList<Page> _pages = eJSLModel.getPages();
    for (final Page pages : _pages) {
      document.<Page>format(pages);
    }
    EList<de.thm.icampus.joomdd.ejsl.eJSL.Extension> _extensions = eJSLModel.getExtensions();
    for (final de.thm.icampus.joomdd.ejsl.eJSL.Extension extensions : _extensions) {
      document.<de.thm.icampus.joomdd.ejsl.eJSL.Extension>format(extensions);
    }
  }
  
  protected void _format(final Parameter parameter, @Extension final IFormattableDocument document) {
    Type _dtype = parameter.getDtype();
    document.<Type>format(_dtype);
  }
  
  public void format(final Object eJSLModel, final IFormattableDocument document) {
    if (eJSLModel instanceof XtextResource) {
      _format((XtextResource)eJSLModel, document);
      return;
    } else if (eJSLModel instanceof EJSLModel) {
      _format((EJSLModel)eJSLModel, document);
      return;
    } else if (eJSLModel instanceof Parameter) {
      _format((Parameter)eJSLModel, document);
      return;
    } else if (eJSLModel instanceof EObject) {
      _format((EObject)eJSLModel, document);
      return;
    } else if (eJSLModel == null) {
      _format((Void)null, document);
      return;
    } else if (eJSLModel != null) {
      _format(eJSLModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(eJSLModel, document).toString());
    }
  }
}
