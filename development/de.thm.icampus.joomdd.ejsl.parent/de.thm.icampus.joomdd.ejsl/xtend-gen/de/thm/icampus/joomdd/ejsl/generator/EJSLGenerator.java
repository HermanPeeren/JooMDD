/**
 * generated by Xtext
 */
package de.thm.icampus.joomdd.ejsl.generator;

import com.google.common.collect.Iterables;
import de.thm.icampus.joomdd.ejsl.eJSL.CMSExtension;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLPart;
import de.thm.icampus.joomdd.ejsl.eJSL.Extension;
import de.thm.icampus.joomdd.ejsl.generator.ps.ExtensionGenerator;
import de.thm.icampus.joomdd.ejsl.ressourceTransformator.RessourceTransformer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class EJSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<EJSLModel> _filter = Iterables.<EJSLModel>filter(_iterable, EJSLModel.class);
    for (final EJSLModel e : _filter) {
      {
        EJSLModel domainModel = ((EJSLModel) e);
        EJSLPart _ejslPart = domainModel.getEjslPart();
        boolean _matched = false;
        if (!_matched) {
          if (_ejslPart instanceof CMSExtension) {
            _matched=true;
            EJSLPart _ejslPart_1 = domainModel.getEjslPart();
            CMSExtension extensionPart = ((CMSExtension) _ejslPart_1);
            RessourceTransformer trans = new RessourceTransformer(e);
            trans.dotransformation();
            EList<Extension> _extensions = extensionPart.getExtensions();
            ExtensionGenerator mainExtensionGen = new ExtensionGenerator(_extensions);
            mainExtensionGen.dogenerate("Extensions", fsa);
          }
        }
      }
    }
  }
}
