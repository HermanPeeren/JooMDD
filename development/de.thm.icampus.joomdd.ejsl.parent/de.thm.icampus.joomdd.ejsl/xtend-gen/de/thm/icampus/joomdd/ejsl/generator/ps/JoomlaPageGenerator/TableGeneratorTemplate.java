package de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaPageGenerator;

import de.thm.icampus.joomdd.ejsl.eJSL.Attribute;
import de.thm.icampus.joomdd.ejsl.eJSL.Entity;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedEntity.ExtendedEntity;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedEntity.ExtendedReference;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedExtension.ExtendedComponent;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaUtil.Slug;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class TableGeneratorTemplate {
  private ExtendedComponent com;
  
  private String tName;
  
  private ExtendedEntity ent;
  
  public TableGeneratorTemplate(final ExtendedComponent component, final ExtendedEntity entity) {
    this.com = component;
    String _name = entity.getName();
    this.tName = _name;
    this.ent = entity;
  }
  
  public CharSequence genClassTable() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    CharSequence _generateFileDoc = Slug.generateFileDoc(this.com, true);
    _builder.append(_generateFileDoc, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// import Joomla table library");
    _builder.newLine();
    _builder.append("jimport(\'joomla.database.table\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* ");
    String _firstUpper = StringExtensions.toFirstUpper(this.tName);
    _builder.append(_firstUpper, "");
    _builder.append(" Table class");
    _builder.newLineIfNotEmpty();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ");
    String _name = this.com.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper_1, "");
    _builder.append("Table");
    String _firstUpper_2 = StringExtensions.toFirstUpper(this.tName);
    _builder.append(_firstUpper_2, "");
    _builder.append(" extends JTable");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public $foreigntableOption = array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _genContructor = this.genContructor();
    _builder.append(_genContructor, "\t");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genBind = this.genBind();
    _builder.append(_genBind, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genCheck = this.genCheck();
    _builder.append(_genCheck, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genGetAssetName = this.genGetAssetName();
    _builder.append(_genGetAssetName, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genGetAssetParentID = this.genGetAssetParentID();
    _builder.append(_genGetAssetParentID, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genInitTheForeignTableOption = this.genInitTheForeignTableOption();
    _builder.append(_genInitTheForeignTableOption, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genLoadAllPrimaryKeys = this.genLoadAllPrimaryKeys();
    _builder.append(_genLoadAllPrimaryKeys, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genPublish = this.genPublish();
    _builder.append(_genPublish, "\t");
    _builder.newLineIfNotEmpty();
    {
      EList<ExtendedReference> _allReferenceToEntity = this.ent.getallReferenceToEntity();
      int _size = _allReferenceToEntity.size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("\t");
        CharSequence _genDelete = this.genDelete();
        _builder.append(_genDelete, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genContructor() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Constructor");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* @param object Database connector object");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function __construct(&$db) ");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("parent::__construct(\'#__");
    String _name = this.com.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "\t");
    _builder.append("_");
    String _name_1 = this.ent.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "\t");
    _builder.append("\', \'id\', $db);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("$this->initTheForeignTableOption();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genInitTheForeignTableOption() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("public function  initTheForeignTableOption(){");
    _builder.newLine();
    {
      EList<ExtendedReference> _allReferenceToEntity = this.ent.getallReferenceToEntity();
      for(final ExtendedReference ref : _allReferenceToEntity) {
        _builder.append(" \t");
        _builder.append("$temp_");
        EList<ExtendedReference> _allReferenceToEntity_1 = this.ent.getallReferenceToEntity();
        int _indexOf = _allReferenceToEntity_1.indexOf(ref);
        _builder.append(_indexOf, " \t");
        _builder.append(" = array(");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append("\"type\" => \"");
        Entity _extendedFromEntity = ref.getExtendedFromEntity();
        String _name = _extendedFromEntity.getName();
        String _string = _name.toString();
        String _firstUpper = StringExtensions.toFirstUpper(_string);
        _builder.append(_firstUpper, " \t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append("\"prefix\" => \"");
        String _name_1 = this.com.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        _builder.append(_firstUpper_1, " \t");
        _builder.append("Table\",");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append("\"foreignkey\" => array(");
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("\"");
        EList<Attribute> _attribute = ref.getAttribute();
        CharSequence _transformAttributeListInString = Slug.transformAttributeListInString(_builder_1.toString(), "", _attribute, ", ");
        _builder.append(_transformAttributeListInString, " \t");
        _builder.append("),");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append("\"refkey\" => array(");
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("\"");
        EList<Attribute> _attributerefereced = ref.getAttributerefereced();
        CharSequence _transformAttributeListInString_1 = Slug.transformAttributeListInString(_builder_2.toString(), "", _attributerefereced, ", ");
        _builder.append(_transformAttributeListInString_1, " \t");
        _builder.append("),");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append("\"name\" => \"#__");
        String _name_2 = this.com.getName();
        String _lowerCase = _name_2.toLowerCase();
        _builder.append(_lowerCase, " \t");
        _builder.append("_");
        Entity _extendedFromEntity_1 = ref.getExtendedFromEntity();
        String _name_3 = _extendedFromEntity_1.getName();
        String _lowerCase_1 = _name_3.toLowerCase();
        _builder.append(_lowerCase_1, " \t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append(");");
        _builder.newLine();
        _builder.append(" \t");
        _builder.append("array_push($this->foreigntableOption, $temp_");
        EList<ExtendedReference> _allReferenceToEntity_2 = this.ent.getallReferenceToEntity();
        int _indexOf_1 = _allReferenceToEntity_2.indexOf(ref);
        _builder.append(_indexOf_1, " \t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genBind() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* Overloaded bind function to pre-process the params.");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* @param    array        Named array");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* @return    null|string    null is operation was satisfactory, otherwise returns an error");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* @see        JTable:bind");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* @since      1.5");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public function bind($array, $ignore = \'\')");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$input = JFactory::getApplication()->input;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$task = $input->getString(\'task\', \'\');");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(($task == \'save\' || $task == \'apply\') && (!JFactory::getUser()->authorise(\'core.edit.state\',\'");
    String _name = this.com.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name);
    String _lowerCase = _nameExtensionBind.toLowerCase();
    _builder.append(_lowerCase, "      ");
    _builder.append(".");
    String _lowerCase_1 = this.tName.toLowerCase();
    _builder.append(_lowerCase_1, "      ");
    _builder.append(".\'.$array[\'id\']) && $array[\'state\'] == 1)){");
    _builder.newLineIfNotEmpty();
    _builder.append("          ");
    _builder.append("$array[\'state\'] = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if($array[\'id\'] == 0){");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$array[\'created_by\'] = JFactory::getUser()->id;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("//Support for file field: file");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$input = JFactory::getApplication()->input;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (isset($array[\'params\']) && is_array($array[\'params\']))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$registry = new JRegistry();");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$registry->loadArray($array[\'params\']);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$array[\'params\'] = (string) $registry;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (isset($array[\'metadata\']) && is_array($array[\'metadata\']))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$registry = new JRegistry();");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$registry->loadArray($array[\'metadata\']);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$array[\'metadata\'] = (string) $registry;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("//Bind the rules for ACL where supported.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (isset($array[\'rules\']) && is_array($array[\'rules\']))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$this->setRules($array[\'rules\']);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return parent::bind($array, $ignore);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCheck() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* Rewrite check function");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public function check()");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("if (property_exists($this, \'ordering\') && $this->id == 0)");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("$this->ordering = self::getNextOrder();");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("     ");
    _builder.append("return parent::check();");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genGetAssetName() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("   ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Define a namespaced asset name for inclusion in the #__assets table");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return string The asset name");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see JTable::_getAssetName");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function _getAssetName()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$k = $this->_tbl_key;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return \'");
    String _name = this.com.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name);
    String _lowerCase = _nameExtensionBind.toLowerCase();
    _builder.append(_lowerCase, "\t");
    _builder.append(".");
    String _lowerCase_1 = this.tName.toLowerCase();
    _builder.append(_lowerCase_1, "\t");
    _builder.append(".\' . (int) $this->$k;");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genGetAssetParentID() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" \t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns the parent asset\'s id. If you have a tree structure, retrieve the parent\'s id using the external key field");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see JTable::_getAssetParentId");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function _getAssetParentId(JTable $table = null, $id = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// We will retrieve the parent-asset from the Asset-table");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$assetParent = JTable::getInstance(\'Asset\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Default: if no asset-parent can be found we take the global asset");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$assetParentId = $assetParent->getRootId();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The item has the component as asset-parent");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$assetParent->loadByName(\'");
    String _name = this.com.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name);
    String _lowerCase = _nameExtensionBind.toLowerCase();
    _builder.append(_lowerCase, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// Return the found asset-parent-id");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($assetParent->id)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$assetParentId = $assetParent->id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return $assetParentId;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genDelete() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @param  mixed   $pk  An optional primary key value to delete.  If not set the instance property value is used.");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* @return bool");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public function delete($pk = null)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("$item = $this->load($pk);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("if(isset($this->foreigntableOption)){");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("foreach($this->foreigntableOptio as $key => $dbtable){");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("$instance_table = JTable::getInstance($dbtable[\'type\'], $dbtable[\'prefix\']);");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("$field = $this->$dbtable[\'refkey\'];");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("$allForeignKeys = $this->loadAllPrimaryKeyofRef($pk, $dbtable[\'refkey\']");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append(", $dbtable[\'name\'], $dbtable[\'foreignkey\']);");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("foreach($allForeignKeys as $keyOf){");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("$result = $instance_table->delete($keyOf);");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("     ");
    _builder.append("$result = parent::delete($pk);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("     ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genLoadAllPrimaryKeys() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public function loadAllPrimaryKeyofRef($pk, $key, $foreigntable, $foreignkeys){");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("$this->load($pk);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("$query = $this->_db->getQuery(true);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("$query->select(\'id\')");
    _builder.newLine();
    _builder.append("   \t         ");
    _builder.append("->from(\"#__\" . $foreigntable);");
    _builder.newLine();
    _builder.append("   \t     ");
    _builder.append("foreach($keylist as $index=>$value){");
    _builder.newLine();
    _builder.append("   \t     \t");
    _builder.append("$query->where($this->_db->quoteName($foreignkeys[$index]) . \"=\" .");
    _builder.newLine();
    _builder.append("   \t     \t\t\t");
    _builder.append("$this->_db->quoteName($this->$value));");
    _builder.newLine();
    _builder.append("   \t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("$this->_db->setQuery($query);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("$result = $this->_db->loadObjectList();");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genPublish() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public function publish($pks = null, $state = 1, $userId = 0)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$k = $this->_tbl_keys;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!is_null($pks))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("foreach ($pks AS $key => $pk)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("if (!is_array($pk))");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("$pks[$key] = array($this->_tbl_key => $pk);");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$userId = (int) $userId;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("$state  = (int) $state;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// If there are no primary keys set check to see if the instance key is set.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (empty($pks))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$pk = array();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("          ");
    _builder.append("foreach ($this->_tbl_keys AS $key)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("if ($this->$key)");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("$pk[$this->$key] = $this->$key;");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("// We don\'t have a full primary key - return false");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$pks = array($pk);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("foreach ($pks AS $pk) {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("// Update the state state for rows with the given primary keys.");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$query = $this->_db->getQuery(true)");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("->update($this->_tbl)");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("->set(\'state = \' . (int)$state);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$this->appendPrimaryKeys($query, $pk);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$this->_db->setQuery($query);");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("$this->_db->execute();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return parent::publish($pks, $state, $userId);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
