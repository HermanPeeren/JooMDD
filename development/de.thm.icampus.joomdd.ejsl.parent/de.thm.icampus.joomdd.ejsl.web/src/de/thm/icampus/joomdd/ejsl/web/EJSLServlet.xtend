/*
 * generated by iCampus (JooMDD team) 2.9.1
 */
package de.thm.icampus.joomdd.ejsl.web

import com.google.inject.Provider
import java.io.IOException
import java.util.List
import java.util.Map
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import javax.servlet.ServletException
import javax.servlet.annotation.WebServlet
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.resource.IResourceServiceProvider
import org.eclipse.xtext.web.servlet.XtextServlet
import java.io.File
import javax.servlet.http.Cookie

/** 
 * Deploy this class into a servlet container to enable DSL-specific services.
 */
@WebServlet(name = 'XtextServices', urlPatterns = '/xtext-service/*')
class EJSLServlet extends XtextServlet {
	 
	val List<ExecutorService> executorServices = newArrayList
	
	var resourcesProvider = IResourceServiceProvider.Registry.INSTANCE
	
	override init() {
		if(resourcesProvider != null){
			new SessionProvider(this.servletContext);
		}				
		super.init()
		val Provider<ExecutorService> executorServiceProvider = [Executors.newCachedThreadPool => [executorServices += it]]
		new EJSLWebSetup(executorServiceProvider).createInjectorAndDoEMFRegistration()
		
	}
	
	override destroy() {
		println("destroy server or session")
		executorServices.forEach[shutdown()]
		executorServices.clear()
		super.destroy()
	}
}
