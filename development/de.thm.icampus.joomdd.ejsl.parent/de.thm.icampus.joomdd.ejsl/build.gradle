dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}
configurations {
	mwe2 {
		extendsFrom compile
	}
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.8.3"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/de/thm/icampus/joomdd/ejsl/GenerateEJSL.mwe2"
	inputs.file "src/de/thm/icampus/joomdd/ejsl/EJSL.xtext"
	outputs.dir "src-gen"
	args += "src/de/thm/icampus/joomdd/ejsl/GenerateEJSL.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

ant.importBuild 'CreateGenFolders.xml'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.xtext:xtext-gradle-plugin:1.0.2'
    }
}
apply plugin: 'org.xtext.xtend'


task updatePomVersion{
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	doLast{	
		def xmlFile = file ('/pom.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		
		list.parent[0].version[0].replaceNode{		
				version(version){}	
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}


task updateManifestVersion(type: Copy){
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	def manifestFile = file ('/META-INF/MANIFEST.MF')	
    def number = '[0|1|2|3|4|5|6|7|8|9]*' 
	
	from('/META-INF2/MANIFEST.MF'){		
		filter{String line -> line.replaceAll('Bundle-Version: '+number+'.'+number+'.'+number , 'Bundle-Version: '+ version)} 
	}	
	into('/META-INF/')
}

task deleteOriginManifest(type: Delete){
	description 'delete the Original Manifest file'
	group ('JooMDD_Help_Task')
	
	delete('/META-INF/')
}


task deleteBackupManifest(type: Delete){
	description 'delete the Version for the Project'
	group ('JooMDD_Help_Task')
	
	delete('/META-INF2/')
}

task copyBackupManifest(type: Copy){
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	from('/META-INF/MANIFEST.MF')	
	
	into('/META-INF2/')
}

task updateVersion(dependsOn : [ 'copyBackupManifest', 'deleteOriginManifest','updateManifestVersion', 'deleteBackupManifest', 'updatePomVersion' ]){
	description 'Update the Version for the Project ejsl'
	group ('JooMDD_Help_Task')

	deleteBackupManifest.mustRunAfter		updateManifestVersion
	updateManifestVersion.mustRunAfter		deleteOriginManifest
	deleteOriginManifest.mustRunAfter		copyBackupManifest
}




