package de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaExtensionGenerator;

import com.google.common.base.Objects;
import de.thm.icampus.joomdd.ejsl.eJSL.Author;
import de.thm.icampus.joomdd.ejsl.eJSL.Component;
import de.thm.icampus.joomdd.ejsl.eJSL.Language;
import de.thm.icampus.joomdd.ejsl.eJSL.Manifestation;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedEntity.ExtendedEntity;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedEntity.ExtendedReference;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedExtension.ExtendedComponent;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedExtension.ExtendedPageReference;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedPage.ExtendedDynamicPage;
import de.thm.icampus.joomdd.ejsl.generator.pi.ExtendedPage.ExtendedPage;
import de.thm.icampus.joomdd.ejsl.generator.pi.util.ExtendedParameter;
import de.thm.icampus.joomdd.ejsl.generator.pi.util.ExtendedParameterGroup;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaEntityGenerator.JoomlaEntityGenerator;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaExtensionGenerator.AbstractExtensionGenerator;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaPageGenerator.FieldsGenerator;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaPageGenerator.PageGeneratorClient;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaPageGenerator.TableGeneratorTemplate;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaUtil.LanguageGenerator;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaUtil.Slug;
import java.util.Calendar;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class ComponentGenerator extends AbstractExtensionGenerator {
  private String slug;
  
  private ExtendedComponent extendeComp;
  
  private String class_name;
  
  private JoomlaEntityGenerator entgen;
  
  public ComponentGenerator(final ExtendedComponent component, final IFileSystemAccess fsa) {
    this.setFsa(fsa);
    String _name = component.getName();
    this.slug = _name;
    this.setNoPrefixName(this.slug);
    this.setName(("com_" + this.slug));
    this.extendeComp = component;
    String _noPrefixName = this.getNoPrefixName();
    String _firstUpper = StringExtensions.toFirstUpper(_noPrefixName);
    this.class_name = _firstUpper;
    this.formatName(this.extendeComp);
    EList<ExtendedEntity> _allExtendedEntity = component.getAllExtendedEntity();
    String _name_1 = component.getName();
    String _plus = ("#__" + _name_1);
    JoomlaEntityGenerator _joomlaEntityGenerator = new JoomlaEntityGenerator(_allExtendedEntity, _plus, false);
    this.entgen = _joomlaEntityGenerator;
  }
  
  public void formatName(final Component component) {
    String _name = component.getName();
    String _slugify = Slug.slugify(_name);
    component.setName(_slugify);
  }
  
  @Override
  public CharSequence generate() {
    this.generateJoomlaDirectory("");
    EList<ExtendedPageReference> _backEndExtendedPagerefence = this.extendeComp.getBackEndExtendedPagerefence();
    final Function1<ExtendedPageReference, ExtendedDynamicPage> _function = (ExtendedPageReference t) -> {
      ExtendedDynamicPage _xifexpression = null;
      ExtendedPage _extendedPage = t.getExtendedPage();
      ExtendedDynamicPage _extendedDynamicPageInstance = _extendedPage.getExtendedDynamicPageInstance();
      boolean _notEquals = (!Objects.equal(_extendedDynamicPageInstance, null));
      if (_notEquals) {
        ExtendedPage _extendedPage_1 = t.getExtendedPage();
        _xifexpression = _extendedPage_1.getExtendedDynamicPageInstance();
      }
      return _xifexpression;
    };
    List<ExtendedDynamicPage> indexPages = ListExtensions.<ExtendedPageReference, ExtendedDynamicPage>map(_backEndExtendedPagerefence, _function);
    String _name = this.getName();
    String _plus = (_name + ".xml");
    CharSequence _xmlContent = this.xmlContent(this.extendeComp, indexPages);
    this.generateFile(_plus, _xmlContent);
    IFileSystemAccess _fsa = this.getFsa();
    LanguageGenerator langgen = new LanguageGenerator(_fsa);
    String _name_1 = this.getName();
    langgen.genComponentLanguage(this.extendeComp, _name_1);
    this.generateJoomlaDirectory("admin/sql");
    CharSequence _dogenerate = this.entgen.dogenerate();
    this.generateFile("admin/sql/install.mysql.utf8.sql", _dogenerate);
    String _name_2 = this.extendeComp.getName();
    CharSequence _sqlAdminSqlUninstallContent = this.entgen.sqlAdminSqlUninstallContent(_name_2);
    this.generateFile("admin/sql/uninstall.mysql.utf8.sql", _sqlAdminSqlUninstallContent);
    this.generateJoomlaDirectory("admin/sql/updates");
    this.generateJoomlaDirectory("admin/sql/updates/mysql");
    String _name_3 = this.extendeComp.getName();
    CharSequence _sqlAdminSqlUpdateContent = this.sqlAdminSqlUpdateContent(_name_3, true);
    this.generateFile("admin/sql/updates/mysql/1.0.1.mysql.utf8.sql", _sqlAdminSqlUpdateContent);
    EList<ExtendedPageReference> _backEndExtendedPagerefence_1 = this.extendeComp.getBackEndExtendedPagerefence();
    boolean _notEquals = (!Objects.equal(_backEndExtendedPagerefence_1, null));
    if (_notEquals) {
      this.generateBackendSection();
    }
    EList<ExtendedPageReference> _frontEndExtendedPagerefence = this.extendeComp.getFrontEndExtendedPagerefence();
    boolean _notEquals_1 = (!Objects.equal(_frontEndExtendedPagerefence, null));
    if (_notEquals_1) {
      this.generateFrontendSection();
    }
    return "";
  }
  
  public CharSequence sqlAdminSqlUpdateContent(final String component, final boolean isupdate) {
    this.entgen.setUpdate(isupdate);
    return this.entgen.dogenerate();
  }
  
  public CharSequence xmlContent(final ExtendedComponent component, final List<ExtendedDynamicPage> indexPages) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<extension type=\"component\" version=\"3.3\" method=\"upgrade\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<name>");
    String _name = component.getName();
    _builder.append(_name, "    ");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    Manifestation _manifest = component.getManifest();
    EList<Author> _authors = _manifest.getAuthors();
    CharSequence _generate = this.generate(_authors);
    _builder.append(_generate, "    ");
    _builder.append("            ");
    _builder.newLineIfNotEmpty();
    {
      Manifestation _manifest_1 = component.getManifest();
      String _creationdate = _manifest_1.getCreationdate();
      boolean _notEquals = (!Objects.equal(_creationdate, null));
      if (_notEquals) {
        _builder.append("    ");
        _builder.append("<creationDate>");
        Manifestation _manifest_2 = component.getManifest();
        String _creationdate_1 = _manifest_2.getCreationdate();
        _builder.append(_creationdate_1, "    ");
        _builder.append("</creationDate>");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("    ");
        _builder.append("<creationDate>");
        Calendar _instance = Calendar.getInstance();
        int _get = _instance.get(Calendar.YEAR);
        _builder.append(_get, "    ");
        _builder.append("</creationDate>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Manifestation _manifest_3 = component.getManifest();
      String _copyright = _manifest_3.getCopyright();
      boolean _notEquals_1 = (!Objects.equal(_copyright, null));
      if (_notEquals_1) {
        _builder.append("    ");
        _builder.append("<copyright>");
        Manifestation _manifest_4 = component.getManifest();
        String _copyright_1 = _manifest_4.getCopyright();
        _builder.append(_copyright_1, "    ");
        _builder.append("</copyright>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Manifestation _manifest_5 = component.getManifest();
      String _license = _manifest_5.getLicense();
      boolean _notEquals_2 = (!Objects.equal(_license, null));
      if (_notEquals_2) {
        _builder.append("    ");
        _builder.append("<license>GPL 2.0</license>");
        _builder.newLine();
      }
    }
    {
      Manifestation _manifest_6 = component.getManifest();
      String _version = _manifest_6.getVersion();
      boolean _notEquals_3 = (!Objects.equal(_version, null));
      if (_notEquals_3) {
        _builder.append("    ");
        _builder.append("<version>");
        Manifestation _manifest_7 = component.getManifest();
        String _version_1 = _manifest_7.getVersion();
        _builder.append(_version_1, "    ");
        _builder.append("</version>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Manifestation _manifest_8 = component.getManifest();
      String _description = _manifest_8.getDescription();
      boolean _notEquals_4 = (!Objects.equal(_description, null));
      if (_notEquals_4) {
        _builder.append("    ");
        _builder.append("<description>");
        Manifestation _manifest_9 = component.getManifest();
        String _description_1 = _manifest_9.getDescription();
        _builder.append(_description_1, "    ");
        _builder.append("</description>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("<version>1.0.1</version>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Install Section -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<install>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<sql>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<file driver=\"mysql\" charset=\"utf8\">sql/install.mysql.utf8.sql</file>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</sql>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</install>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Uninstall Section -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uninstall>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<sql>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<file driver=\"mysql\" charset=\"utf8\">sql/uninstall.mysql.utf8.sql</file>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</sql> ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</uninstall>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Update Section -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<update>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<schemas>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<schemapath type=\"mysql\">sql/updates/mysql</schemapath>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</schemas>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</update>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Site Main File Copy Section -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<files folder=\"site\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<filename>index.html</filename>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<filename>");
    String _noPrefixName = this.getNoPrefixName();
    _builder.append(_noPrefixName, "        ");
    _builder.append(".php</filename>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("<filename>controller.php</filename>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- Additional Files -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<folder>views</folder>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<folder>models</folder>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<folder>controllers</folder>\t\t       ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</files>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<languages>");
    _builder.newLine();
    {
      EList<Language> _languages = component.getLanguages();
      for(final Language lang : _languages) {
        _builder.append("    \t");
        _builder.append("<language tag=\"");
        String _name_1 = lang.getName();
        _builder.append(_name_1, "    \t");
        _builder.append("\">language/site/");
        String _name_2 = lang.getName();
        _builder.append(_name_2, "    \t");
        _builder.append("/");
        String _name_3 = lang.getName();
        _builder.append(_name_3, "    \t");
        _builder.append(".");
        String _name_4 = this.getName();
        _builder.append(_name_4, "    \t");
        _builder.append(".ini</language>");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("<language tag=\"");
        String _name_5 = lang.getName();
        _builder.append(_name_5, "    \t");
        _builder.append("\">language/site/");
        String _name_6 = lang.getName();
        _builder.append(_name_6, "    \t");
        _builder.append("/");
        String _name_7 = lang.getName();
        _builder.append(_name_7, "    \t");
        _builder.append(".");
        String _name_8 = this.getName();
        _builder.append(_name_8, "    \t");
        _builder.append(".sys.ini</language>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("</languages>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<administration>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- Administration Menu Section -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<menu>");
    String _name_9 = component.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name_9);
    String _upperCase = _nameExtensionBind.toUpperCase();
    _builder.append(_upperCase, "        ");
    _builder.append("</menu>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("<submenu>");
    _builder.newLine();
    {
      final Function1<ExtendedDynamicPage, Boolean> _function = (ExtendedDynamicPage t) -> {
        Boolean _isDetailsPage = t.isDetailsPage();
        return Boolean.valueOf((!(_isDetailsPage).booleanValue()));
      };
      Iterable<ExtendedDynamicPage> _filter = IterableExtensions.<ExtendedDynamicPage>filter(indexPages, _function);
      for(final ExtendedDynamicPage page : _filter) {
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<menu link=\"option=");
        String _name_10 = component.getName();
        String _nameExtensionBind_1 = Slug.nameExtensionBind("com", _name_10);
        String _lowerCase = _nameExtensionBind_1.toLowerCase();
        _builder.append(_lowerCase, "\t\t");
        _builder.append("&amp;view=");
        String _name_11 = page.getName();
        String _lowerCase_1 = _name_11.toLowerCase();
        _builder.append(_lowerCase_1, "\t\t");
        _builder.append("\" ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("alias=\"");
        String _name_12 = component.getName();
        String _nameExtensionBind_2 = Slug.nameExtensionBind("com", _name_12);
        String _upperCase_1 = _nameExtensionBind_2.toUpperCase();
        _builder.append(_upperCase_1, "\t\t");
        _builder.append("_ALIAS_");
        String _name_13 = page.getName();
        String _upperCase_2 = _name_13.toUpperCase();
        _builder.append(_upperCase_2, "\t\t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("view=\"");
        String _name_14 = page.getName();
        String _lowerCase_2 = _name_14.toLowerCase();
        _builder.append(_lowerCase_2, "\t\t");
        _builder.append("\">");
        String _name_15 = component.getName();
        String _nameExtensionBind_3 = Slug.nameExtensionBind("com", _name_15);
        String _upperCase_3 = _nameExtensionBind_3.toUpperCase();
        _builder.append(_upperCase_3, "\t\t");
        _builder.append("_TITLE_");
        String _name_16 = page.getName();
        String _upperCase_4 = _name_16.toUpperCase();
        _builder.append(_upperCase_4, "\t\t");
        _builder.append("</menu>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("</submenu>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<!-- Administration Main File Copy Section -->");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<files folder=\"admin\">");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<!-- Admin Main File Copy Section -->");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<filename>index.html</filename>");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("<filename>");
    String _noPrefixName_1 = this.getNoPrefixName();
    _builder.append(_noPrefixName_1, "\t\t    ");
    _builder.append(".php</filename>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t    ");
    _builder.append("<filename>controller.php</filename>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<filename>access.xml</filename>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<filename>config.xml</filename>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<!-- SQL Files Section -->");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>sql</folder>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<!-- Table Files Section -->");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>tables</folder>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<!-- Model Files Section -->");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>models</folder>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<!-- View Files Section -->");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>views</folder>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>controllers</folder>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>helpers</folder>");
    _builder.newLine();
    _builder.append("\t\t\t         ");
    _builder.append("<folder>assets</folder>");
    _builder.newLine();
    _builder.append("\t\t\t     ");
    _builder.append("</files>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<languages >");
    _builder.newLine();
    {
      EList<Language> _languages_1 = component.getLanguages();
      for(final Language lang_1 : _languages_1) {
        _builder.append("\t\t  \t");
        _builder.append("<language tag=\"");
        String _name_17 = lang_1.getName();
        _builder.append(_name_17, "\t\t  \t");
        _builder.append("\">language/admin/");
        String _name_18 = lang_1.getName();
        _builder.append(_name_18, "\t\t  \t");
        _builder.append("/");
        String _name_19 = lang_1.getName();
        _builder.append(_name_19, "\t\t  \t");
        _builder.append(".");
        String _name_20 = this.getName();
        _builder.append(_name_20, "\t\t  \t");
        _builder.append(".ini</language>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t  \t");
        _builder.append("<language tag=\"");
        String _name_21 = lang_1.getName();
        _builder.append(_name_21, "\t\t  \t");
        _builder.append("\">language/admin/");
        String _name_22 = lang_1.getName();
        _builder.append(_name_22, "\t\t  \t");
        _builder.append("/");
        String _name_23 = lang_1.getName();
        _builder.append(_name_23, "\t\t  \t");
        _builder.append(".");
        String _name_24 = this.getName();
        _builder.append(_name_24, "\t\t  \t");
        _builder.append(".sys.ini</language>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("</languages>");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("</administration>");
    _builder.newLine();
    _builder.append("</extension>");
    _builder.newLine();
    return _builder;
  }
  
  private void generateFrontendSection() {
    this.generateJoomlaDirectory("/site");
    String _noPrefixName = this.getNoPrefixName();
    String _plus = ("site/" + _noPrefixName);
    String _plus_1 = (_plus + ".php");
    CharSequence _phpSiteContent = this.phpSiteContent(this.extendeComp);
    this.generateFile(_plus_1, _phpSiteContent);
    CharSequence _phpSiteControllerContent = this.phpSiteControllerContent(this.extendeComp);
    this.generateFile("site/controller.php", _phpSiteControllerContent);
    CharSequence _phpSiteRouterContent = this.phpSiteRouterContent(this.extendeComp);
    this.generateFile("site/router.php", _phpSiteRouterContent);
    this.generateJoomlaDirectory("site/views");
    this.generateJoomlaDirectory("site/models");
    this.generateJoomlaDirectory("site/models/fields");
    this.generateFields("site/models/fields");
    this.generateJoomlaDirectory("site/models/forms");
    this.generateJoomlaDirectory("site/views");
    this.generateJoomlaDirectory("site/assets");
    CharSequence _genScriptForForeignKeys = this.genScriptForForeignKeys();
    this.generateFile(("site/assets/" + "setForeignKeys.js"), _genScriptForForeignKeys);
    this.generateJoomlaDirectory("site/controllers");
    final EList<ExtendedPageReference> pagerefs = this.extendeComp.getFrontEndExtendedPagerefence();
    for (final ExtendedPageReference pageref : pagerefs) {
      ExtendedPage _extendedPage = pageref.getExtendedPage();
      String _path = this.getPath();
      String _plus_2 = (_path + "site");
      this.generatePage(_extendedPage, _plus_2, "site");
    }
  }
  
  private void generateBackendSection() {
    this.generateJoomlaDirectory("admin");
    String _noPrefixName = this.getNoPrefixName();
    String _plus = ("admin/" + _noPrefixName);
    String _plus_1 = (_plus + ".php");
    CharSequence _phpAdminContent = this.phpAdminContent(this.extendeComp);
    this.generateFile(_plus_1, _phpAdminContent);
    CharSequence _phpAdminControllerContent = this.phpAdminControllerContent(this.extendeComp);
    this.generateFile("admin/controller.php", _phpAdminControllerContent);
    CharSequence _xmlAccessContent = this.xmlAccessContent(this.extendeComp);
    this.generateFile("admin/access.xml", _xmlAccessContent);
    CharSequence _xmlConfigContent = this.xmlConfigContent(this.extendeComp);
    this.generateFile("admin/config.xml", _xmlConfigContent);
    this.generateJoomlaDirectory("admin/assets");
    CharSequence _genScriptForForeignKeys = this.genScriptForForeignKeys();
    this.generateFile(("admin/assets/" + "setForeignKeys.js"), _genScriptForForeignKeys);
    this.generateJoomlaDirectory("admin/views");
    InputOutput.<String>println(this.slug);
    String tempSlug = (this.slug + "s");
    this.generateJoomlaDirectory(("admin/views/" + tempSlug));
    CharSequence _phpAdminViewContent = this.phpAdminViewContent(this.extendeComp);
    this.generateFile((("admin/views/" + tempSlug) + "/view.html.php"), _phpAdminViewContent);
    this.generateJoomlaDirectory((("admin/views/" + tempSlug) + "/tmpl"));
    CharSequence _phpAdminTemplateContent = this.phpAdminTemplateContent(this.extendeComp);
    this.generateFile((("admin/views/" + tempSlug) + "/tmpl/default.php"), _phpAdminTemplateContent);
    this.generateJoomlaDirectory("admin/models");
    this.generateJoomlaDirectory("admin/models/fields");
    this.generateFields("admin/models/fields");
    this.generateJoomlaDirectory("admin/tables");
    this.generateTable("admin/tables/");
    this.generateJoomlaDirectory("admin/views");
    this.generateJoomlaDirectory("admin/controllers");
    this.generateJoomlaDirectory("admin/helpers/");
    String _name = this.extendeComp.getName();
    String _lowerCase = _name.toLowerCase();
    String _plus_2 = ("admin/helpers/" + _lowerCase);
    String _plus_3 = (_plus_2 + ".php");
    CharSequence _generateHelperComponent = this.generateHelperComponent();
    this.generateFile(_plus_3, _generateHelperComponent);
    final EList<ExtendedPageReference> pagerefs = this.extendeComp.getBackEndExtendedPagerefence();
    for (final ExtendedPageReference pageref : pagerefs) {
      ExtendedPage _extendedPage = pageref.getExtendedPage();
      String _path = this.getPath();
      String _plus_4 = (_path + "admin");
      this.generatePage(_extendedPage, _plus_4, "admin");
    }
  }
  
  public void generateFields(final String fieldspath) {
    EList<ExtendedEntity> _allExtendedEntity = this.extendeComp.getAllExtendedEntity();
    for (final ExtendedEntity ent : _allExtendedEntity) {
      {
        FieldsGenerator fieldEntity = new FieldsGenerator(this.extendeComp, ent);
        String _name = ent.getName();
        String _lowerCase = _name.toLowerCase();
        String _plus = ((fieldspath + "/") + _lowerCase);
        String _plus_1 = (_plus + ".php");
        CharSequence _genFieldsForEntity = fieldEntity.genFieldsForEntity();
        this.generateFile(_plus_1, _genFieldsForEntity);
        EList<ExtendedReference> _extendedReference = ent.getExtendedReference();
        for (final ExtendedReference ref : _extendedReference) {
          {
            EList<ExtendedReference> _extendedReference_1 = ent.getExtendedReference();
            int index = _extendedReference_1.indexOf(ref);
            FieldsGenerator fieldReference = new FieldsGenerator(ref, this.extendeComp, ent, index);
            String _nameField = fieldReference.getnameField();
            String _lowerCase_1 = _nameField.toLowerCase();
            String _plus_2 = ((fieldspath + "/") + _lowerCase_1);
            String _plus_3 = (_plus_2 + 
              ".php");
            CharSequence _genRefrenceField = fieldReference.genRefrenceField();
            this.generateFile(_plus_3, _genRefrenceField);
          }
        }
      }
    }
    String _name = this.extendeComp.getName();
    String _lowerCase = _name.toLowerCase();
    String _plus = ((fieldspath + "/") + _lowerCase);
    String _plus_1 = (_plus + "user.php");
    CharSequence _genFieldsForUserView = FieldsGenerator.genFieldsForUserView(this.extendeComp);
    this.generateFile(_plus_1, _genFieldsForUserView);
  }
  
  public void generateTable(final String path) {
    EList<ExtendedEntity> _allExtendedEntity = this.extendeComp.getAllExtendedEntity();
    for (final ExtendedEntity ent : _allExtendedEntity) {
      {
        TableGeneratorTemplate table = new TableGeneratorTemplate(this.extendeComp, ent);
        String _name = ent.getName();
        String _lowerCase = _name.toLowerCase();
        String _plus = ((path + "/") + _lowerCase);
        String _plus_1 = (_plus + ".php");
        CharSequence _genClassTable = table.genClassTable();
        this.generateFile(_plus_1, _genClassTable);
      }
    }
  }
  
  public void generatePage(final ExtendedPage pageref, final String path, final String section) {
    IFileSystemAccess _fsa = this.getFsa();
    PageGeneratorClient pageGen = new PageGeneratorClient(pageref, this.extendeComp, path, section, _fsa);
    pageGen.generate();
  }
  
  public CharSequence phpSiteContent(final Component component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("     ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "     ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Get parameters");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// $.. = $params->get(..);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// import joomla controller library");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jimport(\'joomla.application.component.controller\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Get an instance of the controller prefixed by ");
    _builder.append(this.class_name, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$controller = JControllerLegacy::getInstance(\'");
    _builder.append(this.class_name, "    ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Perform the Request task");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$input = JFactory::getApplication()->input;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$controller->execute($input->getCmd(\'task\'));");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Redirect if set by the controller");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$controller->redirect();");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpSiteControllerContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("     ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "     ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// import Joomla controller library");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jimport(\'joomla.application.component.controller\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* General Controller of ");
    String _name = component.getName();
    _builder.append(_name, "     ");
    _builder.append(" component");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class ");
    _builder.append(this.class_name, "    ");
    _builder.append("Controller extends JControllerLegacy");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* display task");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("function display($cachable = false) ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// set default view if not set");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$input = JFactory::getApplication()->input;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("$input->set(\'view\', $input->getCmd(\'view\', \'");
    String _name_1 = component.getName();
    _builder.append(_name_1, "                    ");
    _builder.append("\'));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// call parent behavior");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("parent::display($cachable);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpSiteViewContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("     ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "     ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// import Joomla view library");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jimport(\'joomla.application.component.view\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* HTML View class for the ");
    _builder.append(this.class_name, "     ");
    _builder.append(" Component");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class ");
    _builder.append(this.class_name, "    ");
    _builder.append("View");
    _builder.append(this.class_name, "    ");
    _builder.append(" extends JView");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Overwriting JView display method");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("function display($tpl = null) ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// Assign data to the view");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$this->msg = $this->get(\'Msg\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// Check for errors.");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (count($errors = $this->get(\'Errors\'))) ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("JLog::add(implode(\'<br />\', $errors), JLog::WARNING, \'jerror\');");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// Display the view");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("parent::display($tpl);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xmlSiteTemplateContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<metadata>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<layout title=\"");
    String _name = this.getName();
    String _upperCase = _name.toUpperCase();
    _builder.append(_upperCase, "    ");
    _builder.append("_VIEW_DEFAULT_TITLE\">");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("<message><![CDATA[");
    String _name_1 = this.getName();
    String _upperCase_1 = _name_1.toUpperCase();
    _builder.append(_upperCase_1, "        ");
    _builder.append("_VIEW_DEFAULT_DESC]]></message>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</layout>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<fields");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("name=\"request\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("addfieldpath=\"administrator/components/");
    String _name_2 = this.getName();
    _builder.append(_name_2, "        ");
    _builder.append("/models/fields\"");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append(">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<fieldset name=\"request\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<field");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("name=\"id\"");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("type=\"");
    String _name_3 = this.getName();
    _builder.append(_name_3, "                ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("label=\"");
    String _name_4 = this.getName();
    String _upperCase_2 = _name_4.toUpperCase();
    _builder.append(_upperCase_2, "                ");
    _builder.append("_FIELD_GREETING_LABEL\"");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("description=\"");
    String _name_5 = this.getName();
    String _upperCase_3 = _name_5.toUpperCase();
    _builder.append(_upperCase_3, "                ");
    _builder.append("_FIELD_GREETING_DESC\"");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("/>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</fieldset>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</fields>");
    _builder.newLine();
    _builder.append("</metadata>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpSiteTemplateContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// No direct access to this file");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("defined(\'_JEXEC\') or die(\'Restricted access\');");
    _builder.newLine();
    _builder.append("?>");
    _builder.newLine();
    _builder.append("<h1><?php echo $this->msg; ?></h1>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * generate simple frontendModel file contents,
   * which extend from JModelItem in general and access single items (not lists)
   */
  public CharSequence phpSiteModelContent(final ExtendedComponent component, final ExtendedPage pageref) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// import Joomla modelitem library");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jimport(\'joomla.application.component.modelitem\');");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.append(this.class_name, "     ");
    _builder.append(" Model");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class ");
    String _name = component.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "    ");
    _builder.append("Model");
    String _name_1 = pageref.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "    ");
    _builder.append(" extends JModelItem");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @var array messages");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("protected $messages;");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* Returns a reference to the a Table object, always creating it.");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @param       type    The table type to instantiate");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @param       string  A prefix for the table class name. Optional.");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @param       array   Configuration array for model. Optional.");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @return      JTable  A database object");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @since       2.5");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public function getTable($type = \'");
    _builder.append(this.class_name, "            ");
    _builder.append("\', $prefix = \'");
    _builder.append(this.class_name, "            ");
    _builder.append("Table\', $config = array()) ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return JTable::getInstance($type, $prefix, $config);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* Get the message");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @param  int    The corresponding id of the message to be retrieved");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @return string The message to be displayed to the user");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public function getMsg($id = 1) ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (!is_array($this->messages))");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$this->messages = array();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (!isset($this->messages[$id])) ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//request the selected id");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$jinput = JFactory::getApplication()->input;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$id = $jinput->get(\'id\', 1, \'INT\' );");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// Get a Table");
    _builder.append(this.class_name, "                            ");
    _builder.append(" instance");
    _builder.newLineIfNotEmpty();
    _builder.append("                            ");
    _builder.append("$table = $this->getTable();");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// Load the message");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$table->load($id);");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("// Assign the message");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("$this->messages[$id] = $table->greeting;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return $this->messages[$id];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpAdminContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append(" ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, " ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// Access check.");
    _builder.newLine();
    _builder.append("if (!JFactory::getUser()->authorise(\'core.manage\', \'");
    String _name = component.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name);
    _builder.append(_nameExtensionBind, "");
    _builder.append("\')) ");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throw new Exception(JText::_(\'JERROR_ALERTNOAUTHOR\'));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Include dependancies");
    _builder.newLine();
    _builder.append("jimport(\'joomla.application.component.controller\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Get an instance of the controller prefixed by ");
    String _name_1 = component.getName();
    String _nameExtensionBind_1 = Slug.nameExtensionBind("com", _name_1);
    _builder.append(_nameExtensionBind_1, "");
    _builder.newLineIfNotEmpty();
    _builder.append("$controller\t= JControllerLegacy::getInstance(\'");
    String _name_2 = component.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper, "");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("$controller->execute(JFactory::getApplication()->input->get(\'task\'));");
    _builder.newLine();
    _builder.append("$controller->redirect();");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpAdminControllerContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("     ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "     ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// import Joomla controller library");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("jimport(\'joomla.application.component.controller\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* General Controller of ");
    _builder.append(this.class_name, "     ");
    _builder.append(" component");
    _builder.newLineIfNotEmpty();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("class ");
    _builder.append(this.class_name, "    ");
    _builder.append("Controller extends JControllerLegacy");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* display task");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("public function display($cachable = false, $urlparams = false) ");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("             \t");
    _builder.newLine();
    _builder.append("             \t  ");
    _builder.append("require_once JPATH_COMPONENT . \'/helpers/");
    String _name = component.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "             \t  ");
    _builder.append(".php\';");
    _builder.newLineIfNotEmpty();
    _builder.append("             \t  ");
    _builder.append("$view = JFactory::getApplication()->input->getCmd(\'view\', \'");
    _builder.append(this.class_name, "             \t  ");
    _builder.append("s\');");
    _builder.newLineIfNotEmpty();
    _builder.append("             \t  ");
    _builder.append("JFactory::getApplication()->input->set(\'view\', $view);");
    _builder.newLine();
    _builder.append("             \t  ");
    _builder.append("parent::display($cachable, $urlparams);");
    _builder.newLine();
    _builder.append("             \t  ");
    _builder.append("return $this;");
    _builder.newLine();
    _builder.append("             \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * returns the content of a simple backendSection model file
   * that extends from JModelAdmin and provides methods
   * to handle (load,edit...) one data item
   */
  public CharSequence phpAdminSimpleModelContent(final ExtendedComponent component, final ExtendedPage pageref) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, " ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("jimport(\'joomla.application.component.modeladmin\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = component.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("Model");
    String _name_1 = pageref.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append(" extends JModelAdmin");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpAdminTemplateContent(final Component component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append(" ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, " ");
    _builder.newLineIfNotEmpty();
    _builder.append("?>");
    _builder.newLine();
    _builder.append("<div >");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<p class=\"text-center\"> <h1><?php echo JText::_(\'");
    String _name = component.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name);
    String _upperCase = _nameExtensionBind.toUpperCase();
    _builder.append(_upperCase, "\t");
    _builder.append("\') . \" \". JText::_(\'");
    String _name_1 = component.getName();
    String _nameExtensionBind_1 = Slug.nameExtensionBind("com", _name_1);
    String _upperCase_1 = _nameExtensionBind_1.toUpperCase();
    _builder.append(_upperCase_1, "\t");
    _builder.append("_HOME\'); ?> </h1> </p> ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<div id=\"cpanel\" class=\'cpanel\'>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<?php foreach ($this->views as $view)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("?>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<div class=\"icon\">");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<h3><a href=\'<?php echo $view[\'url\']; ?>\'");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<span><?php echo $view[\'title\']; ?></span>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("</a></h3>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<br />");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("?>");
    _builder.newLine();
    _builder.append("</div>  ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpAdminViewContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "");
    _builder.newLineIfNotEmpty();
    _builder.append("// import Joomla view library");
    _builder.newLine();
    _builder.append("jimport(\'joomla.application.component.view\');");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.append(this.class_name, " ");
    _builder.append(" View");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ");
    _builder.append(this.class_name, "");
    _builder.append("View");
    _builder.append(this.class_name, "");
    _builder.append("s extends JViewLegacy");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("/** Method to get display");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   Object  $tpl  template");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public function display($tpl = null)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!JFactory::getUser()->authorise(\'core.administrator\'))");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return JError::raiseWarning(404, JText::_(\'JERROR_ALERTNOAUTHOR\'));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JHtml::_(\'behavior.tooltip\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$document = JFactory::getDocument();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JHtml::_(\'tabs.start\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$application = JFactory::getApplication(\"administrator\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->option = $application->scope;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addToolBar();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$this->addViews();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("parent::display($tpl);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* creates a joomla administratoristrative tool bar");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private function addToolBar()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JToolBarHelper::title(JText::_(\'");
    String _name = component.getName();
    String _nameExtensionBind = Slug.nameExtensionBind("com", _name);
    String _upperCase = _nameExtensionBind.toUpperCase();
    _builder.append(_upperCase, "        ");
    _builder.append("\') . \': \' . JText::_(\'");
    String _name_1 = component.getName();
    String _nameExtensionBind_1 = Slug.nameExtensionBind("com", _name_1);
    String _upperCase_1 = _nameExtensionBind_1.toUpperCase();
    _builder.append(_upperCase_1, "        ");
    _builder.append("_HOME\'), \'logo\');");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("JToolBarHelper::preferences(\'");
    String _name_2 = component.getName();
    String _nameExtensionBind_2 = Slug.nameExtensionBind("com", _name_2);
    String _lowerCase = _nameExtensionBind_2.toLowerCase();
    _builder.append(_lowerCase, "        ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* creates html elements for the main menu");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @generated");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private function addViews()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$views = array();");
    _builder.newLine();
    {
      EList<ExtendedPageReference> _backEndExtendedPagerefence = component.getBackEndExtendedPagerefence();
      final Function1<ExtendedPageReference, Boolean> _function = (ExtendedPageReference t) -> {
        boolean _and = false;
        ExtendedPage _extendedPage = t.getExtendedPage();
        ExtendedDynamicPage _extendedDynamicPageInstance = _extendedPage.getExtendedDynamicPageInstance();
        boolean _notEquals = (!Objects.equal(_extendedDynamicPageInstance, null));
        if (!_notEquals) {
          _and = false;
        } else {
          ExtendedPage _extendedPage_1 = t.getExtendedPage();
          ExtendedDynamicPage _extendedDynamicPageInstance_1 = _extendedPage_1.getExtendedDynamicPageInstance();
          Boolean _isDetailsPage = _extendedDynamicPageInstance_1.isDetailsPage();
          boolean _not = (!(_isDetailsPage).booleanValue());
          _and = _not;
        }
        return Boolean.valueOf(_and);
      };
      Iterable<ExtendedPageReference> _filter = IterableExtensions.<ExtendedPageReference>filter(_backEndExtendedPagerefence, _function);
      for(final ExtendedPageReference pg : _filter) {
        _builder.newLine();
        _builder.append("$views[\'");
        ExtendedPage _extendedPage = pg.getExtendedPage();
        String _name_3 = _extendedPage.getName();
        String _lowerCase_1 = _name_3.toLowerCase();
        _builder.append(_lowerCase_1, "");
        _builder.append("\'] = array();");
        _builder.newLineIfNotEmpty();
        _builder.append("$views[\'");
        ExtendedPage _extendedPage_1 = pg.getExtendedPage();
        String _name_4 = _extendedPage_1.getName();
        String _lowerCase_2 = _name_4.toLowerCase();
        _builder.append(_lowerCase_2, "");
        _builder.append("\'][\'title\'] = JText::_(\'");
        String _name_5 = component.getName();
        String _nameExtensionBind_3 = Slug.nameExtensionBind("com", _name_5);
        String _upperCase_2 = _nameExtensionBind_3.toUpperCase();
        _builder.append(_upperCase_2, "");
        _builder.append("_TITLE_");
        ExtendedPage _extendedPage_2 = pg.getExtendedPage();
        String _name_6 = _extendedPage_2.getName();
        String _upperCase_3 = _name_6.toUpperCase();
        _builder.append(_upperCase_3, "");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("$views[\'");
        ExtendedPage _extendedPage_3 = pg.getExtendedPage();
        String _name_7 = _extendedPage_3.getName();
        String _lowerCase_3 = _name_7.toLowerCase();
        _builder.append(_lowerCase_3, "");
        _builder.append("\'][\'url\'] = \"index.php?option=");
        String _name_8 = component.getName();
        String _nameExtensionBind_4 = Slug.nameExtensionBind("com", _name_8);
        String _lowerCase_4 = _nameExtensionBind_4.toLowerCase();
        _builder.append(_lowerCase_4, "");
        _builder.append("&view=");
        ExtendedPage _extendedPage_4 = pg.getExtendedPage();
        String _name_9 = _extendedPage_4.getName();
        String _lowerCase_5 = _name_9.toLowerCase();
        _builder.append(_lowerCase_5, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("      ");
    _builder.newLine();
    _builder.append("$this->views = $views;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xmlAccessContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<access component=\"");
    String _name = this.getName();
    _builder.append(_name, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("<section name=\"component\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.admin\" title=\"JACTION_ADMIN\" description=\"JACTION_ADMIN_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.manage\" title=\"JACTION_MANAGE\" description=\"JACTION_MANAGE_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.create\" title=\"JACTION_CREATE\" description=\"JACTION_CREATE_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.delete\" title=\"JACTION_DELETE\" description=\"JACTION_DELETE_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.edit\" title=\"JACTION_EDIT\" description=\"JACTION_EDIT_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.edit.state\" title=\"JACTION_EDITSTATE\" description=\"JACTION_EDITSTATE_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<action name=\"core.edit.own\" title=\"JACTION_EDITOWN\" description=\"JACTION_EDITOWN_COMPONENT_DESC\" />");
    _builder.newLine();
    _builder.append("</section>");
    _builder.newLine();
    CharSequence _xmlAccessContentPage = this.xmlAccessContentPage();
    _builder.append(_xmlAccessContentPage, "");
    _builder.newLineIfNotEmpty();
    _builder.append("</access>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xmlAccessContentPage() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<ExtendedPage> _allExtendedPage = this.extendeComp.getAllExtendedPage();
      for(final ExtendedPage dyn : _allExtendedPage) {
        _builder.append("\t");
        _builder.append("<section name=\"");
        String _name = dyn.getName();
        String _lowerCase = _name.toLowerCase();
        _builder.append(_lowerCase, "\t");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<action name=\"core.create\" title=\"JACTION_CREATE\" description=\"JACTION_CREATE_COMPONENT_DESC\" />");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<action name=\"core.delete\" title=\"JACTION_DELETE\" description=\"JACTION_DELETE_COMPONENT_DESC\" />");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<action name=\"core.edit\" title=\"JACTION_EDIT\" description=\"JACTION_EDIT_COMPONENT_DESC\" />");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<action name=\"core.edit.state\" title=\"JACTION_EDITSTATE\" description=\"JACTION_EDITSTATE_COMPONENT_DESC\" />");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<action name=\"core.edit.own\" title=\"JACTION_EDITOWN\" description=\"JACTION_EDITOWN_COMPONENT_DESC\" />");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</section>");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xmlConfigContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<config>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<fieldset name=\"component\" label=\"");
    String _name = this.getName();
    String _upperCase = _name.toUpperCase();
    _builder.append(_upperCase, "\t");
    _builder.append("_LABEL\" description=\"");
    String _name_1 = this.getName();
    String _upperCase_1 = _name_1.toUpperCase();
    _builder.append(_upperCase_1, "\t");
    _builder.append("_DESC\">");
    _builder.newLineIfNotEmpty();
    {
      EList<ExtendedParameterGroup> _extendedParameterGroupList = component.getExtendedParameterGroupList();
      for(final ExtendedParameterGroup g : _extendedParameterGroupList) {
        {
          EList<ExtendedParameter> _extendedParameterList = g.getExtendedParameterList();
          for(final ExtendedParameter p : _extendedParameterList) {
            _builder.append("\t");
            CharSequence _writeParameter = this.writeParameter(p);
            _builder.append(_writeParameter, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("</fieldset>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</config>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence writeParameter(final ExtendedParameter param) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<field");
    _builder.newLine();
    _builder.append("name=\"");
    String _name = param.getName();
    _builder.append(_name, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("type=\"");
    String _typeName = Slug.getTypeName(param);
    _builder.append(_typeName, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("default=\"");
    String _defaultvalue = param.getDefaultvalue();
    _builder.append(_defaultvalue, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("label=\"");
    String _label = param.getLabel();
    _builder.append(_label, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("description=\"");
    String _descripton = param.getDescripton();
    _builder.append(_descripton, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append(">");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHelperComponent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("     ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(this.extendeComp, true);
    _builder.append(_generateFileDoc, "     ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    String _name = this.extendeComp.getName();
    String _upperCase = _name.toUpperCase();
    _builder.append(_upperCase, " ");
    _builder.append("  helper.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class ");
    String _name_1 = this.extendeComp.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("Helper {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Configure the Linkbar.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static function addSubmenu($vName = \'\') {");
    _builder.newLine();
    {
      EList<ExtendedPageReference> _backEndExtendedPagerefence = this.extendeComp.getBackEndExtendedPagerefence();
      final Function1<ExtendedPageReference, Boolean> _function = (ExtendedPageReference t) -> {
        boolean _and = false;
        ExtendedPage _extendedPage = t.getExtendedPage();
        ExtendedDynamicPage _extendedDynamicPageInstance = _extendedPage.getExtendedDynamicPageInstance();
        boolean _notEquals = (!Objects.equal(_extendedDynamicPageInstance, null));
        if (!_notEquals) {
          _and = false;
        } else {
          ExtendedPage _extendedPage_1 = t.getExtendedPage();
          ExtendedDynamicPage _extendedDynamicPageInstance_1 = _extendedPage_1.getExtendedDynamicPageInstance();
          Boolean _isDetailsPage = _extendedDynamicPageInstance_1.isDetailsPage();
          boolean _not = (!(_isDetailsPage).booleanValue());
          _and = _not;
        }
        return Boolean.valueOf(_and);
      };
      Iterable<ExtendedPageReference> _filter = IterableExtensions.<ExtendedPageReference>filter(_backEndExtendedPagerefence, _function);
      for(final ExtendedPageReference pg : _filter) {
        _builder.append("    \t");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("\t");
        _builder.append("JHtmlSidebar::addEntry(");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("\t");
        _builder.append("JText::_(\'");
        String _name_2 = this.extendeComp.getName();
        String _nameExtensionBind = Slug.nameExtensionBind("com", _name_2);
        String _upperCase_1 = _nameExtensionBind.toUpperCase();
        _builder.append(_upperCase_1, "    \t\t");
        _builder.append("_TITLE_");
        ExtendedPage _extendedPage = pg.getExtendedPage();
        String _name_3 = _extendedPage.getName();
        String _upperCase_2 = _name_3.toUpperCase();
        _builder.append(_upperCase_2, "    \t\t");
        _builder.append("\'),");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("\t");
        _builder.append("\'index.php?option=");
        String _name_4 = this.extendeComp.getName();
        String _nameExtensionBind_1 = Slug.nameExtensionBind("com", _name_4);
        String _lowerCase = _nameExtensionBind_1.toLowerCase();
        _builder.append(_lowerCase, "    \t\t");
        _builder.append("&view=");
        ExtendedPage _extendedPage_1 = pg.getExtendedPage();
        String _name_5 = _extendedPage_1.getName();
        String _lowerCase_1 = _name_5.toLowerCase();
        _builder.append(_lowerCase_1, "    \t\t");
        _builder.append("\',");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("\t");
        _builder.append("$vName == \'");
        ExtendedPage _extendedPage_2 = pg.getExtendedPage();
        String _name_6 = _extendedPage_2.getName();
        String _lowerCase_2 = _name_6.toLowerCase();
        _builder.append(_lowerCase_2, "    \t\t");
        _builder.append("\'");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("\t");
        _builder.append(");");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("     \t\t");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("  ");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Gets a list of the actions that can be performed.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return\tJObject");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @since\t1.6");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static function getActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$user = JFactory::getUser();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$result = new JObject;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$assetName = \'");
    String _name_7 = this.extendeComp.getName();
    String _nameExtensionBind_2 = Slug.nameExtensionBind("com", _name_7);
    _builder.append(_nameExtensionBind_2, "        ");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$actions = array(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\'core.admin\', \'core.manage\', \'core.create\', \'core.edit\', \'core.edit.own\', \'core.edit.state\', \'core.delete\'");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("foreach ($actions as $action) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$result->set($action, $user->authorise($action, $assetName));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return $result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence phpSiteRouterContent(final ExtendedComponent component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("   ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(component, true);
    _builder.append(_generateFileDoc, "   ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param\tarray\tA named array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return\tarray");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _name = component.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("BuildRoute(&$query) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$segments = array();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($query[\'task\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$segments[] = implode(\'/\', explode(\'.\', $query[\'task\']));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($query[\'task\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($query[\'view\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$segments[] = $query[\'view\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($query[\'view\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (isset($query[\'id\'])) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$segments[] = $query[\'id\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unset($query[\'id\']);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $segments;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param\tarray\tA named array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param\tarray");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("function ");
    String _name_1 = component.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append("ParseRoute($segments) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("$vars = array();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// view is always the first element of the array");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("$vars[\'view\'] = array_shift($segments);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while (!empty($segments)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("$segment = array_pop($segments);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (is_numeric($segment)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$vars[\'id\'] = $segment;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$vars[\'task\'] = $vars[\'view\'] . \'.\' . $segment;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return $vars;");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genScriptForForeignKeys() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    CharSequence _generateFileDoc = Slug.generateFileDoc(this.extendeComp, false);
    _builder.append(_generateFileDoc, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("function setValueForeignKeys(element) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var data = JSON.parse(element.value);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var item;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for(item in data){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("jQuery(\"#\"+item).attr(\"value\",data[item]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
