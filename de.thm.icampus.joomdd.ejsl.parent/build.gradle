buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:2.0.2'
		classpath 'org.xtext:xtext-idea-gradle-plugin:2.0.2'      
    }
}

subprojects {
		
	if(!(project.name == 'ProjectWizard' )) // excluding ProjectWizard for the standard xtext configuration
	{
		ext.xtextVersion = '2.17.0.M3'
		repositories {
			jcenter()
		}
	
		
		apply plugin: 'java'
        dependencies {
            compile platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
        }
		apply plugin: 'org.xtext.xtend'
		apply from: "${rootDir}/gradle/source-layout.gradle"
		apply from: "${rootDir}/gradle/maven-deployment.gradle"
		apply plugin: 'eclipse'
		apply plugin: 'idea'
		
		group = 'de.thm.icampus.joomdd.ejsl'
	
		version = getLastVersion()
	
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
	
		configurations.all {
			exclude group: 'asm'
		}
	}
	
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}


task incrementPatchLevelVersionParent{
	description 'Increment the Patch level Version for the Project'
	group ('JooMDD_Help_Task')

	doLast{		
		def xmlFile = file('pom.xml')
		def xmlText = xmlFile.getText()
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
				
		def lastversion = list.version[0].text()		
		
		def a = 0
		def newMajorVersion
		def newMinorVersion
		def newPatchVersion
		 
		(lastversion =~ /(\d+)/).each { match, digit -> 
			if (a == 0){
				newMajorVersion = "$digit"		
			}else if (a == 1){
				newMinorVersion = "$digit"				
			}else if (a == 2){
				newPatchVersion = "$digit"
				newPatchVersion = newPatchVersion.toInteger()+1
			}
			a = a +1
		}
		
		def newVersion = newMajorVersion + '.' + newMinorVersion + '.' + newPatchVersion
		println "NewVersion:"+newVersion
		
		
		list.version[0].replaceNode{		
				version(newVersion){}		
		}	
		
		def writer = new FileWriter(xmlFile)
		
		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
		subprojects { 
			version = newVersion	// refresh version for update all versions
		}
	}
}


task incrementMinorVersionParent{
	description 'Increment the Minor Version for the Project in parent pom'
	group ('JooMDD_Help_Task')

	doLast{
		def xmlFile = file('pom.xml')
		def xmlText = xmlFile.getText()
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
				
		def lastversion = list.version[0].text()
		
		def a = 0
		def newMajorVersion
		def newMinorVersion
		def newPatchVersion
		 
		(lastversion =~ /(\d+)/).each { match, digit -> 
			if (a == 0){
				newMajorVersion = "$digit"		
			}else if (a == 1){
				newMinorVersion = "$digit"
				newMinorVersion = newMinorVersion.toInteger()+1
			}else if (a == 2){
				newPatchVersion = "$digit"
			}
			a = a +1
		}
		
		def newVersion = newMajorVersion + '.' + newMinorVersion + '.' + '0'
		println "NewVersion:"+newVersion
		version = newVersion
				
		list.version[0].replaceNode{		
				version(newVersion){}		
		}	
		
		def writer = new FileWriter(xmlFile)
		
		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
		subprojects { 
			version = newVersion	// refresh version for update all versions
		}
	}
}

task incrementMajorVersionParent{
	description 'Increment the Major Version for the Project in parent pom'
	group ('JooMDD_Help_Task')

	doLast{
		def xmlFile = file('pom.xml')
		def xmlText = xmlFile.getText()
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
				
		def lastversion = list.version[0].text()	
		
		def a = 0
		def newMajorVersion
		def newMinorVersion
		def newPatchVersion
		 
		(lastversion =~ /(\d+)/).each { match, digit -> 
			if (a == 0){
				newMajorVersion = "$digit"		
				newMajorVersion = newMajorVersion.toInteger()+1
			}else if (a == 1){
				newMinorVersion = "$digit"			
			}else if (a == 2){
				newPatchVersion = "$digit"
			}
			a = a +1
		}
		
		def newVersion = newMajorVersion + '.' + '0' + '.' + '0'
		println "NewVersion:"+newVersion
				
		list.version[0].replaceNode{		
				version(newVersion){}		
		}	
		
		def writer = new FileWriter(xmlFile)
		
		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
		subprojects { 
			version = newVersion	// refresh version for update all versions
		}
	}
}



/*
	Update Version for UI project

*/
task updateUIPomVersion{
	description 'Update the Version for the Project in parent pom'
	group ('JooMDD_Help_Task')
	
	doLast{	
		def xmlFile = file ('./de.thm.icampus.joomdd.ejsl.ui/pom.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		
		list.parent[0].version[0].replaceNode{		
				version(version){}	
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}


task updateUIManifestVersion(type: Copy){
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	def number = '[0|1|2|3|4|5|6|7|8|9]*' 
	
	from('./de.thm.icampus.joomdd.ejsl.ui/META-INF2/MANIFEST.MF'){		
		filter{String line -> line.replaceAll('Bundle-Version: '+number+'.'+number+'.'+number , 'Bundle-Version: '+ version)} 
	}	
	into('./de.thm.icampus.joomdd.ejsl.ui/META-INF/')
}

task deleteUIOriginManifest(type: Delete){
	description 'delete the Original Manifest file'
	group ('JooMDD_Help_Task')
	
	delete('./de.thm.icampus.joomdd.ejsl.ui/META-INF/')
}


task deleteUIBackupManifest(type: Delete){
	description 'delete the Version for the Project'
	group ('JooMDD_Help_Task')
	
	delete('./de.thm.icampus.joomdd.ejsl.ui/META-INF2/')
}

task copyUIBackupManifest(type: Copy){
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	from('./de.thm.icampus.joomdd.ejsl.ui/META-INF/MANIFEST.MF')	
	
	into('./de.thm.icampus.joomdd.ejsl.ui/META-INF2/')
}

task loadVersion{
	description 'Update the Version for the Project ejsl'
	group ('JooMDD_Help_Task')
	
	version = getLastVersion()

}

task updateUIVersion(dependsOn : [ 'loadVersion','copyUIBackupManifest', 'deleteUIOriginManifest','updateUIManifestVersion', 'deleteUIBackupManifest', 'updateUIPomVersion' ]){
	description 'Update the Version for the Project ejsl'
	group ('JooMDD_Help_Task')
	
	updateUIManifestVersion.mustRunAfter	loadVersion
	deleteUIBackupManifest.mustRunAfter		updateUIManifestVersion
	updateUIManifestVersion.mustRunAfter	deleteUIOriginManifest
	deleteUIOriginManifest.mustRunAfter		copyUIBackupManifest
}

/*
	End Update Version for UI project
*/


/*
	Update Version in sdk Project
*/
task updateSDKVersionXml(type:Copy){
	description 'Update the Version for the Project SDK'
	group ('JooMDD_Help_Task')
	
	def number = '[0|1|2|3|4|5|6|7|8|9]*' 
	
	from('./de.thm.icampus.joomdd.ejsl.sdk/tmp/feature.xml'){		
		filter{String line -> line.replaceFirst('     version=\"'+number+'.'+number+'.'+number , '     version=\"'+ version)} 
	}	
	into('./de.thm.icampus.joomdd.ejsl.sdk/')	
}

task deleteSDKOriginXml(type: Delete){
	description 'delete the Original Manifest file'
	group ('JooMDD_Help_Task')
	
	delete('./de.thm.icampus.joomdd.ejsl.sdk/feature.xml')
}


task deleteSDKBackupXml(type: Delete){
	description 'delete the Version for the Project'
	group ('JooMDD_Help_Task')
	
	delete('./de.thm.icampus.joomdd.ejsl.sdk/tmp/')
}

task copySDKBackupXml(type: Copy){
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	from('./de.thm.icampus.joomdd.ejsl.sdk/feature.xml')	
	
	into('./de.thm.icampus.joomdd.ejsl.sdk/tmp/')
}


task updateSDKPomVersion{
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	doLast{	
		def xmlFile = file ('./de.thm.icampus.joomdd.ejsl.sdk/pom.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		
		list.parent[0].version[0].replaceNode{		
				version(version){}	
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}



task updateSDKVersion(dependsOn : [ 'copySDKBackupXml', 'updateSDKPomVersion', 'deleteSDKOriginXml' , 'updateSDKVersionXml' , 'deleteSDKBackupXml']){
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	deleteSDKOriginXml.mustRunAfter		copySDKBackupXml
	updateSDKVersionXml.mustRunAfter	deleteSDKOriginXml
	deleteSDKBackupXml.mustRunAfter		updateSDKVersionXml
}
/*
	End Update Version in sdk Project
*/

/*
	update repository pom
*/

task updateRepositoryPomVersion{
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	doLast{	
		def xmlFile = file ('./de.thm.icampus.joomdd.ejsl.repository/pom.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		
		list.parent[0].version[0].replaceNode{		
				version(version){}	
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}

/*
	update target pom
*/


task updateTargetPomVersion{
	description 'Update the Version for the Project'
	group ('JooMDD_Help_Task')
	
	doLast{	
		def xmlFile = file ('./de.thm.icampus.joomdd.ejsl.target/pom.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		
		list.parent[0].version[0].replaceNode{		
				version(version){}	
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}





/*
	Update Version EJSLUpdateSite Project
*/

task updateEJSLUpdateSiteVersion{
	description 'Update the Version for the update Site Project '
	group ('JooMDD_Help_Task')
	
	doLast{	
		def xmlFile = file ('../updateSites/Eclipse/site.xml') ///de.thm.icampus.joomdd.ejsl.ui/pom.xml
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		list.feature[0].replaceNode{
			feature(
				url:"features/de.thm.icampus.joomdd.ejsl.sdk_"+version+".jar",
				id:"de.thm.icampus.joomdd.ejsl.sdk",
				version : version,
			){
				category(
					name:"JooMDD"
				)
			}
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}

/*
	Start update Version for all Projects
*/
task updateAllVersions(dependsOn: ['updateSDKPomVersion','updateRepositoryPomVersion','updateTargetPomVersion','updateUIVersion', 'updateSDKVersion', 'updateEJSLUpdateSiteVersion', ':de.thm.icampus.joomdd.ejsl:updateVersion',':de.thm.icampus.joomdd.ejsl.ide:updateVersion']){
	description 'Update all Versions for the Project'
	group ('JooMDD_Help_Task')
}



task incrementMajorVersion(dependsOn : [ 'incrementMajorVersionParent', 'updateAllVersions' ]){
	description 'Increment the Major Version for the Project'
	group ('JooMDD')
	
	updateAllVersions.mustRunAfter	incrementMajorVersionParent	
}

task incrementMinorVersion(dependsOn : [ 'incrementMinorVersionParent', 'updateAllVersions' ]){
	description 'Increment the Major Version for the Project'
	group ('JooMDD')
	
	updateAllVersions.mustRunAfter	incrementMinorVersionParent
	
}

task incrementPatchLevelVersion(dependsOn : [ 'incrementPatchLevelVersionParent', 'updateAllVersions' ]){
	description 'Increment the Major Version for the Project'
	group ('JooMDD')
	
	updateAllVersions.mustRunAfter	incrementPatchLevelVersionParent	
}


/*
	Eclipse Deployment Automation
*/
task cleanEJSLUpdateSite(type: Delete){
	description 'delete the old plugin of the JooMDDUpdateSite'
	group ('JooMDD_Help_Task')
	
	delete('../updateSites/Eclipse/features/')
	delete('../updateSites/Eclipse/plugins/')
	
	//delete('../updateSites/Eclipse/content.jar')
	//delete('../updateSites/Eclipse/artifacts.jar')
}



ant.importBuild 'build.xml'


task runAntBuild(dependsOn: "antBuildEclipse"){
	description 'Runs build.xml Ant script for Eclipse Update Site'
	group("JooMDD_Help_Task")
	
}

task copyEclPluginToReleasesTMP(type: Copy, dependsOn:['copyUIImgTMP', 'copyUITemplatesTMP', 'copyUIMetaInfTMP', 'copyEclPluginToPlugin']){
    from './de.thm.icampus.joomdd.ejsl.ui/plugin.xml'
    from './de.thm.icampus.joomdd.ejsl.ui/target/classes/'
    into '../updateSites/tmp'
}

task copyEclPluginToPlugin(type: Copy){
	def version = getLastVersion()
	from './de.thm.icampus.joomdd.ejsl.ide/build/libs/'
   	from './de.thm.icampus.joomdd.ejsl/build/libs/'
   	include '*' + version + '*.jar*'
   	into '../updateSites/Eclipse/plugins'
   	rename { String fileName ->
        fileName.replace("-" + version, "_" + version)
    }
}

task copyUIImgTMP(type: Copy){
	from './de.thm.icampus.joomdd.ejsl.ui/img'
    into '../updateSites/tmp/img'
}

task copyUITemplatesTMP(type: Copy){
       from './de.thm.icampus.joomdd.ejsl.ui/templates'
       into '../updateSites/tmp/templates'
}

task copyUIMetaInfTMP(type: Copy){
       from './de.thm.icampus.joomdd.ejsl.ui/META-INF'
       into '../updateSites/tmp/META-INF'
}

//create a single Jar with all dependencies
task createPluginUIJar(type: Jar) {
	def lastversion = getLastVersion()

	destinationDir = file("../updateSites/Eclipse/plugins")
    archiveFileName = 'de.thm.icampus.joomdd.ejsl.ui_' + lastversion + '.jar'
    from "../updateSites/tmp"
}


//create a single Jar with all dependencies
task createFeatureSDKJar(type: Jar) {
	def lastversion = getLastVersion()	

	destinationDir = file("../updateSites/Eclipse/features")
    archiveFileName = 'de.thm.icampus.joomdd.ejsl.sdk_' + lastversion + '.jar'
    from "./de.thm.icampus.joomdd.ejsl.sdk/feature.xml"
}

task createEclPluginToReleases(dependsOn:["copyEclPluginToReleasesTMP", "createPluginUIJar", "createFeatureSDKJar"]) {
	description ''
	group ('JooMDD_Help_Task')
	
	createPluginUIJar.mustRunAfter copyEclPluginToReleasesTMP
	
	doLast {
		delete('../updateSites/tmp/')
	}
}

task JooMDDDeployEclipse(dependsOn:["cleanEJSLUpdateSite","updateAllVersions","antBuildEclipse"]){
	description 'Run All Eclipse Tasks'
	group ('JooMDD_Help_Task')
	
	
	cleanEJSLUpdateSite.mustRunAfter		updateAllVersions
	antBuildEclipse.mustRunAfter			updateAllVersions
	
	doLast {
        println 'Eclipse plugins created '
    }
	
}

/*
	regenerate Xtend-Gen Folder Tests Project
*/
task deleteXtendGenTests (type: Delete){
	description 'delete Xtend-Gen Folder for the UI Project'
	group ('JooMDD_Help_Task')
	
	delete('./de.thm.icampus.joomdd.ejsl.tests/xtend-gen/')
}

ant.importBuild './de.thm.icampus.joomdd.ejsl.tests/CreateGenFolders.xml'

task runAntScriptTests(dependsOn: make){
	description 'runs Ant Skript'
	group ('JooMDD_Help_Task')
}

task reCreateXtendGenFolderTests(dependsOn:['deleteXtendGenTests','runAntScriptTests']){
	description 'Delete and create xtend-gen'
	group ('JooMDD_Help_Task')

	runAntScriptTests.mustRunAfter	deleteXtendGenTests
}

/*
	regenerate Xtend-Gen Folder UI Project
*/
/*
task deleteXtendGen (type: Delete){
	description 'delete Xtend-Gen Folder for the UI Project'
	group ('JooMDD_Help_Task')
	
	delete('/de.thm.icampus.joomdd.ejsl.ui/xtend-gen/')
}

ant.importBuild './de.thm.icampus.joomdd.ejsl.ui/CreateGenFolders.xml'

task runAntScript(dependsOn: makeUI){
	description 'runs Ant Skript'
	group ('JooMDD_Help_Task')
}

task regenerateXtendGenFolder(dependsOn:['deleteXtendGen','runAntScript','regenerateXtendGenFolderTests']){
	description 'Delete and create xtend-gen'
	group ('JooMDD')

	runAntScript.mustRunAfter	deleteXtendGen
}
*/

/*
	JooMDD Deploy
*/

task JooMDDDeploy(dependsOn:[":de.thm.icampus.joomdd.ejsl.tests:runJUnitTest", ":ProjectWizard:createIntelliJWizardPluginSource","JooMDDDeployEclipse" ,"de.thm.icampus.joomdd.ejsl.idea:JooMDDDeployJetBrains", "createEclPluginToReleases"]){
	group ('joomdd')
    description "Create all deployment resources (JetBrains IDE) , prepare Eclipse Deploy "

	tasks.getByPath('de.thm.icampus.joomdd.ejsl.idea:JooMDDDeployJetBrains').mustRunAfter	tasks.getByPath(":ProjectWizard:createIntelliJWizardPluginSource")
    tasks.getByPath(":ProjectWizard:createIntelliJWizardPluginSource").mustRunAfter			tasks.getByPath(":de.thm.icampus.joomdd.ejsl.tests:runJUnitTest")
    JooMDDDeployEclipse.mustRunAfter														tasks.getByPath(":de.thm.icampus.joomdd.ejsl.tests:runJUnitTest")
    createEclPluginToReleases.mustRunAfter													JooMDDDeployEclipse
    createEclPluginToReleases.mustRunAfter													tasks.getByPath('de.thm.icampus.joomdd.ejsl.idea:JooMDDDeployJetBrains')
    
	doLast{
		println "Deployment finished"
	}
}


/*
	Live Tasks
*/

task JetBrainsIDEWithAllPlugins2(dependsOn:":de.thm.icampus.joomdd.ejsl.idea:ideaZip"){
	group('JetBrains_Wizard_Help_Task')
	description 'prepare Live eJSL Plugin'
}

task JetBrainsIDEWithAllPlugins(dependsOn:(":ProjectWizard:JetBrainsIDEWithAllPlugins")){
	group('joomdd_Live')
	description 'Create Wizard and eJSL, add Xtext and run JetBrainsIDE'
	
	doLast{
		println "Configure the IDE in Project Wizard/build.gradle file. Line 30 - 32: intellij{version ... for IntelliJ and alternativeIdePath ... for PhpStorm."
	}
}

JetBrainsIDEWithAllPlugins.dependsOn JetBrainsIDEWithAllPlugins2

task IntelliJWitheJSL(dependsOn:(":de.thm.icampus.joomdd.ejsl.idea:runIdea")){
	group('joomdd_Live')
	description 'Create eJSL, add Xtext and run IntelliJ IDEA'
}

def getLastVersion(){
	def xmlFile = file('pom.xml')
	def xmlText = xmlFile.getText()
	def parser = new XmlParser()
	def list = parser.parseText(xmlText)

	version =  list.version[0].text()

	return version	
}
