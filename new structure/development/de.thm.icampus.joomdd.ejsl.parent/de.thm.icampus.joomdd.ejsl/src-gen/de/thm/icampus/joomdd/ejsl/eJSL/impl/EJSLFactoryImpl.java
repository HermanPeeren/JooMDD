/**
 * generated by iCampus (JooMDD team) 2.9.1
 */
package de.thm.icampus.joomdd.ejsl.eJSL.impl;

import de.thm.icampus.joomdd.ejsl.eJSL.Attribute;
import de.thm.icampus.joomdd.ejsl.eJSL.Author;
import de.thm.icampus.joomdd.ejsl.eJSL.BackendSection;
import de.thm.icampus.joomdd.ejsl.eJSL.ComplexHTMLTypeKinds;
import de.thm.icampus.joomdd.ejsl.eJSL.ComplexHTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.Component;
import de.thm.icampus.joomdd.ejsl.eJSL.ContextLink;
import de.thm.icampus.joomdd.ejsl.eJSL.CssBlock;
import de.thm.icampus.joomdd.ejsl.eJSL.Datapackage;
import de.thm.icampus.joomdd.ejsl.eJSL.Datatype;
import de.thm.icampus.joomdd.ejsl.eJSL.DatatypeReference;
import de.thm.icampus.joomdd.ejsl.eJSL.DetailPageField;
import de.thm.icampus.joomdd.ejsl.eJSL.DetailsPage;
import de.thm.icampus.joomdd.ejsl.eJSL.DynamicPage;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLFactory;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel;
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLPackage;
import de.thm.icampus.joomdd.ejsl.eJSL.Entity;
import de.thm.icampus.joomdd.ejsl.eJSL.Extension;
import de.thm.icampus.joomdd.ejsl.eJSL.ExtensionPackage;
import de.thm.icampus.joomdd.ejsl.eJSL.ExternalLink;
import de.thm.icampus.joomdd.ejsl.eJSL.FrontendSection;
import de.thm.icampus.joomdd.ejsl.eJSL.HTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.IndexPage;
import de.thm.icampus.joomdd.ejsl.eJSL.InternalLink;
import de.thm.icampus.joomdd.ejsl.eJSL.KeyValuePair;
import de.thm.icampus.joomdd.ejsl.eJSL.Language;
import de.thm.icampus.joomdd.ejsl.eJSL.Library;
import de.thm.icampus.joomdd.ejsl.eJSL.Link;
import de.thm.icampus.joomdd.ejsl.eJSL.LinkParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Manifestation;
import de.thm.icampus.joomdd.ejsl.eJSL.Method;
import de.thm.icampus.joomdd.ejsl.eJSL.MethodParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Module;
import de.thm.icampus.joomdd.ejsl.eJSL.Page;
import de.thm.icampus.joomdd.ejsl.eJSL.PageReference;
import de.thm.icampus.joomdd.ejsl.eJSL.Parameter;
import de.thm.icampus.joomdd.ejsl.eJSL.ParameterGroup;
import de.thm.icampus.joomdd.ejsl.eJSL.Plugin;
import de.thm.icampus.joomdd.ejsl.eJSL.PluginKinds;
import de.thm.icampus.joomdd.ejsl.eJSL.Position;
import de.thm.icampus.joomdd.ejsl.eJSL.PositionParameter;
import de.thm.icampus.joomdd.ejsl.eJSL.Reference;
import de.thm.icampus.joomdd.ejsl.eJSL.Section;
import de.thm.icampus.joomdd.ejsl.eJSL.SectionReference;
import de.thm.icampus.joomdd.ejsl.eJSL.SimpleHTMLTypeKinds;
import de.thm.icampus.joomdd.ejsl.eJSL.SimpleHTMLTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.StandardTypeKinds;
import de.thm.icampus.joomdd.ejsl.eJSL.StandardTypes;
import de.thm.icampus.joomdd.ejsl.eJSL.StaticPage;
import de.thm.icampus.joomdd.ejsl.eJSL.Template;
import de.thm.icampus.joomdd.ejsl.eJSL.Type;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EJSLFactoryImpl extends EFactoryImpl implements EJSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EJSLFactory init()
  {
    try
    {
      EJSLFactory theEJSLFactory = (EJSLFactory)EPackage.Registry.INSTANCE.getEFactory(EJSLPackage.eNS_URI);
      if (theEJSLFactory != null)
      {
        return theEJSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EJSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EJSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EJSLPackage.EJSL_MODEL: return createEJSLModel();
      case EJSLPackage.TYPE: return createType();
      case EJSLPackage.DATATYPE_REFERENCE: return createDatatypeReference();
      case EJSLPackage.STANDARD_TYPES: return createStandardTypes();
      case EJSLPackage.DATATYPE: return createDatatype();
      case EJSLPackage.PARAMETER: return createParameter();
      case EJSLPackage.PARAMETER_GROUP: return createParameterGroup();
      case EJSLPackage.DATAPACKAGE: return createDatapackage();
      case EJSLPackage.ENTITY: return createEntity();
      case EJSLPackage.ATTRIBUTE: return createAttribute();
      case EJSLPackage.REFERENCE: return createReference();
      case EJSLPackage.PAGE: return createPage();
      case EJSLPackage.STATIC_PAGE: return createStaticPage();
      case EJSLPackage.DYNAMIC_PAGE: return createDynamicPage();
      case EJSLPackage.INDEX_PAGE: return createIndexPage();
      case EJSLPackage.DETAILS_PAGE: return createDetailsPage();
      case EJSLPackage.DETAIL_PAGE_FIELD: return createDetailPageField();
      case EJSLPackage.HTML_TYPES: return createHTMLTypes();
      case EJSLPackage.SIMPLE_HTML_TYPES: return createSimpleHTMLTypes();
      case EJSLPackage.COMPLEX_HTML_TYPES: return createComplexHTMLTypes();
      case EJSLPackage.LINK: return createLink();
      case EJSLPackage.EXTERNAL_LINK: return createExternalLink();
      case EJSLPackage.INTERNAL_LINK: return createInternalLink();
      case EJSLPackage.CONTEXT_LINK: return createContextLink();
      case EJSLPackage.LINK_PARAMETER: return createLinkParameter();
      case EJSLPackage.EXTENSION: return createExtension();
      case EJSLPackage.EXTENSION_PACKAGE: return createExtensionPackage();
      case EJSLPackage.COMPONENT: return createComponent();
      case EJSLPackage.SECTION: return createSection();
      case EJSLPackage.BACKEND_SECTION: return createBackendSection();
      case EJSLPackage.PAGE_REFERENCE: return createPageReference();
      case EJSLPackage.FRONTEND_SECTION: return createFrontendSection();
      case EJSLPackage.MODULE: return createModule();
      case EJSLPackage.PLUGIN: return createPlugin();
      case EJSLPackage.LIBRARY: return createLibrary();
      case EJSLPackage.PACKAGE: return createPackage();
      case EJSLPackage.CLASS: return createClass();
      case EJSLPackage.METHOD: return createMethod();
      case EJSLPackage.METHOD_PARAMETER: return createMethodParameter();
      case EJSLPackage.TEMPLATE: return createTemplate();
      case EJSLPackage.MANIFESTATION: return createManifestation();
      case EJSLPackage.AUTHOR: return createAuthor();
      case EJSLPackage.LANGUAGE: return createLanguage();
      case EJSLPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case EJSLPackage.POSITION: return createPosition();
      case EJSLPackage.POSITION_PARAMETER: return createPositionParameter();
      case EJSLPackage.CSS_BLOCK: return createCssBlock();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EJSLPackage.PLUGIN_KINDS:
        return createPluginKindsFromString(eDataType, initialValue);
      case EJSLPackage.STANDARD_TYPE_KINDS:
        return createStandardTypeKindsFromString(eDataType, initialValue);
      case EJSLPackage.SECTION_REFERENCE:
        return createSectionReferenceFromString(eDataType, initialValue);
      case EJSLPackage.SIMPLE_HTML_TYPE_KINDS:
        return createSimpleHTMLTypeKindsFromString(eDataType, initialValue);
      case EJSLPackage.COMPLEX_HTML_TYPE_KINDS:
        return createComplexHTMLTypeKindsFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EJSLPackage.PLUGIN_KINDS:
        return convertPluginKindsToString(eDataType, instanceValue);
      case EJSLPackage.STANDARD_TYPE_KINDS:
        return convertStandardTypeKindsToString(eDataType, instanceValue);
      case EJSLPackage.SECTION_REFERENCE:
        return convertSectionReferenceToString(eDataType, instanceValue);
      case EJSLPackage.SIMPLE_HTML_TYPE_KINDS:
        return convertSimpleHTMLTypeKindsToString(eDataType, instanceValue);
      case EJSLPackage.COMPLEX_HTML_TYPE_KINDS:
        return convertComplexHTMLTypeKindsToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EJSLModel createEJSLModel()
  {
    EJSLModelImpl ejslModel = new EJSLModelImpl();
    return ejslModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatatypeReference createDatatypeReference()
  {
    DatatypeReferenceImpl datatypeReference = new DatatypeReferenceImpl();
    return datatypeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StandardTypes createStandardTypes()
  {
    StandardTypesImpl standardTypes = new StandardTypesImpl();
    return standardTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Datatype createDatatype()
  {
    DatatypeImpl datatype = new DatatypeImpl();
    return datatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterGroup createParameterGroup()
  {
    ParameterGroupImpl parameterGroup = new ParameterGroupImpl();
    return parameterGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Datapackage createDatapackage()
  {
    DatapackageImpl datapackage = new DatapackageImpl();
    return datapackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Page createPage()
  {
    PageImpl page = new PageImpl();
    return page;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StaticPage createStaticPage()
  {
    StaticPageImpl staticPage = new StaticPageImpl();
    return staticPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DynamicPage createDynamicPage()
  {
    DynamicPageImpl dynamicPage = new DynamicPageImpl();
    return dynamicPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexPage createIndexPage()
  {
    IndexPageImpl indexPage = new IndexPageImpl();
    return indexPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DetailsPage createDetailsPage()
  {
    DetailsPageImpl detailsPage = new DetailsPageImpl();
    return detailsPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DetailPageField createDetailPageField()
  {
    DetailPageFieldImpl detailPageField = new DetailPageFieldImpl();
    return detailPageField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HTMLTypes createHTMLTypes()
  {
    HTMLTypesImpl htmlTypes = new HTMLTypesImpl();
    return htmlTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleHTMLTypes createSimpleHTMLTypes()
  {
    SimpleHTMLTypesImpl simpleHTMLTypes = new SimpleHTMLTypesImpl();
    return simpleHTMLTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComplexHTMLTypes createComplexHTMLTypes()
  {
    ComplexHTMLTypesImpl complexHTMLTypes = new ComplexHTMLTypesImpl();
    return complexHTMLTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExternalLink createExternalLink()
  {
    ExternalLinkImpl externalLink = new ExternalLinkImpl();
    return externalLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InternalLink createInternalLink()
  {
    InternalLinkImpl internalLink = new InternalLinkImpl();
    return internalLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextLink createContextLink()
  {
    ContextLinkImpl contextLink = new ContextLinkImpl();
    return contextLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkParameter createLinkParameter()
  {
    LinkParameterImpl linkParameter = new LinkParameterImpl();
    return linkParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Extension createExtension()
  {
    ExtensionImpl extension = new ExtensionImpl();
    return extension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExtensionPackage createExtensionPackage()
  {
    ExtensionPackageImpl extensionPackage = new ExtensionPackageImpl();
    return extensionPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Section createSection()
  {
    SectionImpl section = new SectionImpl();
    return section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BackendSection createBackendSection()
  {
    BackendSectionImpl backendSection = new BackendSectionImpl();
    return backendSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PageReference createPageReference()
  {
    PageReferenceImpl pageReference = new PageReferenceImpl();
    return pageReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FrontendSection createFrontendSection()
  {
    FrontendSectionImpl frontendSection = new FrontendSectionImpl();
    return frontendSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Plugin createPlugin()
  {
    PluginImpl plugin = new PluginImpl();
    return plugin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Library createLibrary()
  {
    LibraryImpl library = new LibraryImpl();
    return library;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.thm.icampus.joomdd.ejsl.eJSL.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.thm.icampus.joomdd.ejsl.eJSL.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodParameter createMethodParameter()
  {
    MethodParameterImpl methodParameter = new MethodParameterImpl();
    return methodParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Template createTemplate()
  {
    TemplateImpl template = new TemplateImpl();
    return template;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Manifestation createManifestation()
  {
    ManifestationImpl manifestation = new ManifestationImpl();
    return manifestation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Author createAuthor()
  {
    AuthorImpl author = new AuthorImpl();
    return author;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Language createLanguage()
  {
    LanguageImpl language = new LanguageImpl();
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Position createPosition()
  {
    PositionImpl position = new PositionImpl();
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PositionParameter createPositionParameter()
  {
    PositionParameterImpl positionParameter = new PositionParameterImpl();
    return positionParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CssBlock createCssBlock()
  {
    CssBlockImpl cssBlock = new CssBlockImpl();
    return cssBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PluginKinds createPluginKindsFromString(EDataType eDataType, String initialValue)
  {
    PluginKinds result = PluginKinds.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPluginKindsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StandardTypeKinds createStandardTypeKindsFromString(EDataType eDataType, String initialValue)
  {
    StandardTypeKinds result = StandardTypeKinds.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStandardTypeKindsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SectionReference createSectionReferenceFromString(EDataType eDataType, String initialValue)
  {
    SectionReference result = SectionReference.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSectionReferenceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleHTMLTypeKinds createSimpleHTMLTypeKindsFromString(EDataType eDataType, String initialValue)
  {
    SimpleHTMLTypeKinds result = SimpleHTMLTypeKinds.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSimpleHTMLTypeKindsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComplexHTMLTypeKinds createComplexHTMLTypeKindsFromString(EDataType eDataType, String initialValue)
  {
    ComplexHTMLTypeKinds result = ComplexHTMLTypeKinds.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComplexHTMLTypeKindsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EJSLPackage getEJSLPackage()
  {
    return (EJSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EJSLPackage getPackage()
  {
    return EJSLPackage.eINSTANCE;
  }

} //EJSLFactoryImpl
