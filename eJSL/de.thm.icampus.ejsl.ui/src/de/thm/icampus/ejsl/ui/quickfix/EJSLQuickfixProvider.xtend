/*
 * generated by Xtext
 */
package de.thm.icampus.ejsl.ui.quickfix

import de.thm.icampus.ejsl.validation.EJSLValidator

import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import de.thm.icampus.ejsl.eJSL.Attribute
import de.thm.icampus.ejsl.eJSL.Reference

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class EJSLQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Fix(EJSLValidator::AMBIGUOUS_ENTITY)
	def addIDtoEntity(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Add ID to Entity', 'Change the name.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset + issue.length, 1, "_ID_X ")
		]
	}

	@Fix(EJSLValidator::AMBIGUOUS_LANGUAGE)
	def deletedoubleLanguageKey(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Delete Language', 'Remove the LanguageKey.', 'default.png') [ context |
			val xtextDocument = context.xtextDocument
			System.out.print(acceptor.toString)
			val lineofffset = xtextDocument.getLineOffset(issue.lineNumber - 1)
			xtextDocument.replace(lineofffset, 20, "")
		]
	}

	@Fix(EJSLValidator::AMBIGUOUS_DATATYPE)
	def addIDtoDatatype(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Add ID to Datatype', 'Change the name.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset + issue.length - 1, 1, "_ID_X\" ")
		]
		acceptor.accept(issue, 'Delete Datatype', 'Remove the Datatype.', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			System.out.print(acceptor.toString)
			val lineofffset = xtextDocument.getLineOffset(issue.lineNumber - 1)
			xtextDocument.replace(lineofffset, 20, "")
		]
	}

	@Fix(EJSLValidator::INVALID_AUTHOR_URL)
	def validURL(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Set "http" before', 'Setting HTTP:// before invalid URL', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, 1, "\"http://") // http:// bevor "-char
		]
		acceptor.accept(issue, 'Set "https" before', 'Setting HTTPS:// before invalid URL', 'upcase.png') [ context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, 1, "\"https://") // https:// bevor "-char
		]
	}

	@Fix(EJSLValidator::MISSING_PRIMARY_ATTRIBUTE)
	def fixNonExistingPrimaryAttribute(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Add primary attribute', 'Adding primary attribute to the first Attribute', '')[ element, context |
			val allAttributes = element.eContents						// get all attributes from the entity 
			val firstAttribute = allAttributes.get(0) as Attribute		// select the first attribute and convert it to de.thm.icampus.ejsl.eJSL.Attribute
			firstAttribute.isprimary = true								// set the Primary attribute to true
		]
	}
	
	@Fix(EJSLValidator::NOT_PRIMARY_REFERENCE)
	def fixReferenceAttributeError(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue, 'Change to a primary attribute.', 'Change the attribute to a primary attribute from the same entity.', '')[ reference, context |
			val ref = reference as Reference
			var hasNewReference = false
			val parentEntity = ref.getEntity				// first get the parent entity of the reference
			val allAttributes = parentEntity.eContents		// then get all attributes of this entity
			
			for(att : allAttributes){						// now look which of the attributes is a primary and set the first as attributereferenced
				val a = att as Attribute
				if(a.isIsprimary && !hasNewReference){
					ref.attributerefereced = a
					hasNewReference = true
				}
			}
		]
	}
	
	@Fix(EJSLValidator::AMBIGUOUS_ATTRIBUTE_NAME)
	def attributename(Issue issue, IssueResolutionAcceptor acceptor){
				acceptor.accept(issue, 'Add ID to attribute', 'Change the name.', '') [
			context |
			val xtextDocument = context.xtextDocument		
			xtextDocument.replace(issue.offset+issue.length-1, 1, "_ID_X ")
			]
	}
}
