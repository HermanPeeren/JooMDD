//see https://github.com/xtext/xtext-gradle-plugin/tree/master/xtext-idea-gradle-plugin
apply plugin: 'org.xtext.idea-plugin'
apply plugin: 'org.xtext.idea-repository'

dependencies {
	compile project(':de.thm.icampus.joomdd.ejsl')
	compile project(':de.thm.icampus.joomdd.ejsl.ide')
}

ideaDevelopment {
	ideaVersion = '163.7743.44'  //143.381.42'
	def v = '2.10.0'
	pluginRepositories {
		url "https://download.eclipse.org/modeling/tmf/xtext/idea/${v}/updatePlugins.xml"
	}
	pluginDependencies {
		id 'org.eclipse.xtext.idea' version v
	}
}

ideaRepository.rootUrl = "${buildDir}/ideaRepository"

/*
	JooMDD Tasks for IDEA and PhpStorm support

	For manual changes in version
	Change it in the pom.xml file in the parent project 
	(joomdd_repo\development\de.thm.icampus.joomdd.ejsl.parent\pom.xml) Line 4
*/

task deleteOldPlugin(type: Delete){
	description 'delete old Plugin'
	group ('JooMDD_Help_Task')
	delete '../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution/de.thm.icampus.joomdd.ejsl.idea/'
}


task unzip(type: Copy){
	description 'unZip IDEA Plugin'
	group ('JooMDD_Help_Task')

	def zipFile = file('../de.thm.icampus.joomdd.ejsl.idea/build/distributions/de.thm.icampus.joomdd.ejsl.idea-'+ version +'.zip')

	from zipTree(zipFile)		
	into '../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution'
}


task deletePluginXml(type: Delete){
	description 'delete old pluginxml for live IDE'
	group ('JooMDD_Help_Task')
	
	delete 'build/unpackedNewestDistribution/de.thm.icampus.joomdd.ejsl.idea/META-INF/plugin.xml'

}

task copyDeploymentPluginXml(type: Copy, dependsOn:'deletePluginXml'){
	description 'copy plugin Xml to Plugin'
	group ('JooMDD_Help_Task')

	from 'META-INF_deployment/plugin.xml'
	into 'build/unpackedNewestDistribution/de.thm.icampus.joomdd.ejsl.idea/META-INF/'
}

task parsePhpStormUpdatePluginsXml{
	description 'Parse updatePlugins.xml for the new version'
	group ('JooMDD_Help_Task')
	doLast{
		def xmlFile = file ('../../releases/PhpStorm/ideaRepository/updatePlugins.xml')
		def xmlText = xmlFile.getText()
		def parser = new XmlParser()
		def list = parser.parseText(xmlText)
		
		list.plugin[0].replaceNode{	
			plugin(name:"JooMDD", 
				id:"de.thm.icampus.joomdd.ejsl.phpstorm", 
				url:"https://raw.githubusercontent.com/icampus/JooMDD/master/"
				 + "PhpStorm/ideaRepository/de.thm.icampus.joomdd.ejsl.phpstorm-"
				 + version +".zip",
				version: version){}
		}
		
		def writer = new FileWriter(xmlFile)
		
		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)			
	}
}

task parseIntelliJUpdatePluginsXml{
	description 'Parse updatePlugins.xml for the new version'
	group ('JooMDD_Help_Task')

	doLast{
		def xmlFile = file ('../../releases/IntelliJ/ideaRepository/updatePlugins.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()	
		def list = parser.parseText(xmlText)

		list.plugin[0].replaceNode{	
			plugin(name:"JooMDD", 
				id:"de.thm.icampus.joomdd.ejsl.idea", 
				url:"https://raw.githubusercontent.com/icampus/JooMDD/master/IntelliJ/ideaRepository/de.thm.icampus.joomdd.ejsl.idea-"+ version +".zip",
				version: version ){}
		}

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)			
	}
}



task changeDependencies{	
	description 'Edit Plugin.xml to add dependencies for PhpStorm'
	group ('JooMDD_Help_Task')

	doLast{
		def xmlFile = file ('../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution/de.thm.icampus.joomdd.ejsl.idea/META-INF/plugin.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()	
		def list = parser.parseText(xmlText)		

		list.depends[1].replaceNode{
			depends("com.intellij.modules.lang"){}		
			depends("com.jetbrains.php"){}		
		}	

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}

task changeVersion{
	description 'Parse Plugin.xml and add the version'
	group ('JooMDD_Help_Task')

	doLast{
		def xmlFile = file ('../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution/de.thm.icampus.joomdd.ejsl.idea/META-INF/plugin.xml')
		def xmlText = xmlFile.getText()	
		def parser = new XmlParser()	
		def list = parser.parseText(xmlText)	

		list.version.replaceNode{
			version(version){}
		}		

		def writer = new FileWriter(xmlFile)

		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.preserveWhitespace = true
		printer.print(list)
	}
}




task zipIntelliJ(type: Zip){
	description 'Zip and copy IDEA Plugin to releases'
	group ('JooMDD_Help_Task')

	from '../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution/'	
	destinationDir file("../../releases/IntelliJ/ideaRepository")
	doLast{
		println "Plugin created in path: joomdd_repo/releases/IntelliJ/ideaRepository/de.thm.icampus.joomdd.ejsl.idea-"+ version +'.zip'
	}
}


task zipPhpStorm(type: Zip){
	description 'Zip and copy PhpStorm Plugin to releases'
	group ('JooMDD_Help_Task')
	
	from '../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution/'	
	destinationDir file('../../releases/PhpStorm/ideaRepository/')
}


task renamePhpStormPlugin(type: Copy){
	description 'NEW'
	group ('JooMDD_Help_Task')
	
	
	from "../../releases/PhpStorm/ideaRepository/"
	into "../../releases/PhpStorm/ideaRepository/"
	def file = 'de.thm.icampus.joomdd.ejsl.idea-'+ version +'.zip'
	def newfile = 'de.thm.icampus.joomdd.ejsl.phpstorm-'+ version +'.zip'
	
	include(file)
	
	rename (file , newfile)
	
	doLast{
		println "Plugin created in path: joomdd_repo/releases/PhpStorm/ideaRepository/de.thm.icampus.joomdd.ejsl.phpstorm-"+ version +'.zip'
	}	
}


task deleteOldIdeaPlugin(type: Delete){
	description 'delete old Plugin'
	group ('JooMDD_Help_Task')
	delete '../../releases/PhpStorm/ideaRepository/de.thm.icampus.joomdd.ejsl.idea-'+ version +'.zip'
}

/*
	For the Wizard sources must be in the out folder
*/

task addIntelliJWizard(type: Copy){
	description 'add the newest Wizard to Plugin'
	group ('JooMDD_Help_Task')
		
	from('../ProjectWizard/build/wizardSources')
	into ('../de.thm.icampus.joomdd.ejsl.idea/build/unpackedNewestDistribution/de.thm.icampus.joomdd.ejsl.idea/classes/')
}

/*
	Order of JooMDDDeploy tasks	
		-	incrementVersion				// manual step. 
		-	ideaZip							(xtext gradle standard)
		-	deleteOldPlugin
		-	unzip
		-	copyDeploymentPluginXml
		-	changeVersion
		-	addIntelliJWizard
		-	zipIntelliJ
		-	changeDependencies
		-	zipPhpStorm
		-	renamePhpStormPlugin
		-	deleteOldIdeaPlugin
		-	parsePhpStormUpdatePluginsXml
		-	parseIntelliJUpdatePluginsXml
*/

task JooMDDDeployJetBrains  (dependsOn: [
		'ideaZip', 'deleteOldPlugin', 'unzip', 'copyDeploymentPluginXml' , 'changeVersion' , 'addIntelliJWizard', 'zipIntelliJ', 
		'changeDependencies', 'zipPhpStorm', 'renamePhpStormPlugin', 'deleteOldIdeaPlugin', 
		'parsePhpStormUpdatePluginsXml', 'parseIntelliJUpdatePluginsXml']){
	description 'Create all for deployment resources for IntelliJ/PhpStorm'
	group ('JooMDD_Help_Task')

	//ideaZip.mustRunAfter						incrementVersion	// versioning is at the moment a manual task
	deleteOldPlugin.mustRunAfter				ideaZip
	unzip.mustRunAfter							deleteOldPlugin
	copyDeploymentPluginXml.mustRunAfter		unzip
	changeVersion.mustRunAfter 					copyDeploymentPluginXml
	addIntelliJWizard.mustRunAfter				changeVersion
	zipIntelliJ.mustRunAfter 					addIntelliJWizard
	changeDependencies.mustRunAfter 			zipIntelliJ
	zipPhpStorm.mustRunAfter 					changeDependencies
	renamePhpStormPlugin.mustRunAfter			zipPhpStorm
	deleteOldIdeaPlugin.mustRunAfter			renamePhpStormPlugin
	parsePhpStormUpdatePluginsXml.mustRunAfter	deleteOldIdeaPlugin
	parseIntelliJUpdatePluginsXml.mustRunAfter	parsePhpStormUpdatePluginsXml
	
}


task deleteXtendGen (type: Delete){
	description 'delete Xtend-Gen Folder for the Project'
	group ('JooMDD_Help_Task')
	
	delete('./xtend-gen/')
}

ant.importBuild 'CreateGenFolders.xml'

task runAntScript(dependsOn: make){
	description 'runs Ant Skript'
	group ('JooMDD_Help_Task')
}

task regenerateXtendGenFolder(dependsOn:['deleteXtendGen','runAntScript']){
	description 'delete and create xtend gen'
	group ('JooMDD')

	runAntScript.mustRunAfter	deleteXtendGen
}



