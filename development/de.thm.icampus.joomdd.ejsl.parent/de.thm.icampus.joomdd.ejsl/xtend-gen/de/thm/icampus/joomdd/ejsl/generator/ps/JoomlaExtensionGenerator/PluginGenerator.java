package de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaExtensionGenerator;

import com.google.common.base.Objects;
import de.thm.icampus.joomdd.ejsl.eJSL.Author;
import de.thm.icampus.joomdd.ejsl.eJSL.KeyValuePair;
import de.thm.icampus.joomdd.ejsl.eJSL.Language;
import de.thm.icampus.joomdd.ejsl.eJSL.Manifestation;
import de.thm.icampus.joomdd.ejsl.eJSL.Plugin;
import de.thm.icampus.joomdd.ejsl.eJSL.PluginKinds;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaExtensionGenerator.AbstractExtensionGenerator;
import de.thm.icampus.joomdd.ejsl.generator.ps.JoomlaUtil.Slug;
import java.util.Calendar;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Plugin Generator</b></em>'.
 * <!-- end-user-doc -->
 * 
 * 
 * @see eJSLGenerator.GeneratorTemplatePackage#getPluginGenerator()
 * @model
 * @generated
 */
@SuppressWarnings("all")
public class PluginGenerator extends AbstractExtensionGenerator {
  private String slug;
  
  private Plugin plugin;
  
  public PluginGenerator(final Plugin plugin, final IFileSystemAccess fsa) {
    this.setFsa(fsa);
    String _name = plugin.getName();
    String _slugify = Slug.slugify(_name);
    this.slug = _slugify;
    this.setName(("plg_" + this.slug));
    this.plugin = plugin;
  }
  
  public static PluginGenerator getGenerator(final Plugin plugin, final IFileSystemAccess fsa) {
    return new PluginGenerator(plugin, fsa);
  }
  
  /**
   * @override
   */
  @Override
  public CharSequence generate() {
    this.generateJoomlaDirectory("");
    String _name = this.plugin.getName();
    String _plus = (_name + ".xml");
    CharSequence _xmlContent = this.xmlContent(this.plugin);
    this.generateFile(_plus, _xmlContent);
    String _name_1 = this.plugin.getName();
    String _plus_1 = (_name_1 + ".php");
    CharSequence _phpContent = this.phpContent(this.plugin);
    this.generateFile(_plus_1, _phpContent);
    EList<Language> _languages = this.plugin.getLanguages();
    int _size = _languages.size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      this.generateJoomlaDirectory("language");
      EList<Language> _languages_1 = this.plugin.getLanguages();
      for (final Language lang : _languages_1) {
        {
          String _name_2 = lang.getName();
          String _plus_2 = ("language/" + _name_2);
          this.generateJoomlaDirectory(_plus_2);
          String _name_3 = lang.getName();
          String _plus_3 = ("language/" + _name_3);
          String _plus_4 = (_plus_3 + "/");
          String _name_4 = lang.getName();
          String _plus_5 = (_plus_4 + _name_4);
          String _plus_6 = (_plus_5 + ".");
          String _plus_7 = (_plus_6 + "plg_");
          PluginKinds _type = this.plugin.getType();
          String _plus_8 = (_plus_7 + _type);
          String _plus_9 = (_plus_8 + "_");
          String _name_5 = this.plugin.getName();
          String _plus_10 = (_plus_9 + _name_5);
          String _plus_11 = (_plus_10 + ".ini");
          CharSequence _iniContent = this.iniContent(lang);
          this.generateFile(_plus_11, _iniContent);
          String _name_6 = lang.getName();
          String _plus_12 = ("language/" + _name_6);
          String _plus_13 = (_plus_12 + "/");
          String _name_7 = lang.getName();
          String _plus_14 = (_plus_13 + _name_7);
          String _plus_15 = (_plus_14 + ".");
          String _plus_16 = (_plus_15 + "plg_");
          PluginKinds _type_1 = this.plugin.getType();
          String _plus_17 = (_plus_16 + _type_1);
          String _plus_18 = (_plus_17 + "_");
          String _name_8 = this.plugin.getName();
          String _plus_19 = (_plus_18 + _name_8);
          String _plus_20 = (_plus_19 + ".sys.ini");
          CharSequence _iniContent_1 = this.iniContent(lang);
          this.generateFile(_plus_20, _iniContent_1);
        }
      }
    }
    return "";
  }
  
  public CharSequence iniContent(final Language language) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<KeyValuePair> _keyvaluepairs = language.getKeyvaluepairs();
      for(final KeyValuePair e : _keyvaluepairs) {
        String _name = e.getName();
        _builder.append(_name, "");
        _builder.append("=\"");
        String _value = e.getValue();
        _builder.append(_value, "");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence phpContent(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* @version $Id: ");
    String _name = plugin.getName();
    _builder.append(_name, "");
    _builder.append(" version date author");
    _builder.newLineIfNotEmpty();
    _builder.append("* @copyright Copyright");
    _builder.newLine();
    _builder.append("* @license License, for example GNU/GPL");
    _builder.newLine();
    _builder.append("* All other information you would like to add");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// don\'t allow other scripts to grab and execute this file");
    _builder.newLine();
    _builder.append("defined(\'_JEXEC\') or die(\'Direct Access to this location is not allowed\');");
    _builder.newLine();
    _builder.append("jimport(\'joomla.plugin.plugin\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Plg");
    PluginKinds _type = plugin.getType();
    String _string = _type.toString();
    String _firstUpper = StringExtensions.toFirstUpper(_string);
    _builder.append(_firstUpper, "");
    String _name_1 = plugin.getName();
    String _string_1 = _name_1.toString();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_string_1);
    _builder.append(_firstUpper_1, "");
    _builder.append(" extends JPlugin");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public function plg");
    PluginKinds _type_1 = plugin.getType();
    String _string_2 = _type_1.toString();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_string_2);
    _builder.append(_firstUpper_2, "\t");
    String _name_2 = plugin.getName();
    String _string_3 = _name_2.toString();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_string_3);
    _builder.append(_firstUpper_3, "\t");
    _builder.append("(&$subject, $params)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("parent::__construct($subject, $params);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$this->loadLanguage();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _events = this.events(plugin);
    _builder.append(_events, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence events(final Plugin plugin) {
    PluginKinds _type = plugin.getType();
    if (_type != null) {
      switch (_type) {
        case AUTHENTICATE:
          return this.authenticateEvents(plugin);
        case CAPTCHA:
          return this.captchaEvents(plugin);
        case CONTENT:
          return this.contentEvents(plugin);
        case CONTACT:
          return this.contactEvents(plugin);
        case EDITORS:
          return this.editorsEvents(plugin);
        case EXTENSIONS:
          return this.extensionsEvents(plugin);
        case FINDER:
          return this.finderEvents(plugin);
        case QUICK_ICONS:
          return this.quickiconsEvents(plugin);
        case SEARCH:
          return this.searchEvents(plugin);
        case SYSTEM:
          return this.systemEvents(plugin);
        case USER:
          return this.userEvents(plugin);
        case XML_RPC:
          return this.xmlrpcEvents(plugin);
        default:
          break;
      }
    }
    return null;
  }
  
  public CharSequence authenticateEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public function onUserAuthenticate($credentials, $options, &$response)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$response->type = \'");
    String _name = plugin.getName();
    String _string = _name.toString();
    String _firstUpper = StringExtensions.toFirstUpper(_string);
    _builder.append(_firstUpper, "\t");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO: place code here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence captchaEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//TODO: place code here");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contentEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public function onContentPrepare($context, &$article, &$params, $page = 0)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO: place code here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence contactEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//TODO: place code here");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence editorsEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Initialises the Editor.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  string  JavaScript Initialization string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onInit()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public function onSave()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//always return");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Get the editor content");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onGetContent()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return \'/*place code here*/\';");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Set the editor content.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onSetContent()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return \'/*place code here*/\';");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Adds the editor specific insert method.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onGetInsertMethod()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Display the editor area.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $name     The control name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $content  The contents of the text area.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $width    The width of the text area (px or %).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $height   The height of the text area (px or %).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   integer  $col      The number of columns for the textarea.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   integer  $row      The number of rows for the textarea.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   boolean  $buttons  True and the editor buttons will be displayed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $id       An optional ID for the textarea (note: since 1.6). If not supplied the name is used.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $asset    Unused");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   object   $author   Unused");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   array    $params   Associative array of editor parameters.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  string  HTML Output");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$id = null, $asset = null, $author = null, $params = array())");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (empty($id))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$id = $name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Only add \"px\" to width and height if they are not given as a percentage");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (is_numeric($width))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$width .= \'px\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (is_numeric($height))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$height .= \'px\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//TODO: add some code here");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Displays the editor buttons.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string  $name     The control name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   mixed   $buttons  [array with button objects | boolean true to display buttons]");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string  $asset    The object asset");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   object  $author   The author.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  string HTML");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function _displayButtons($name, $buttons, $asset, $author)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$return = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$args = array(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'name\'  => $name,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'event\' => \'onGetInsertMethod\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$results = (array) $this->update($args);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($results)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("foreach ($results as $result)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (is_string($result) && trim($result))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("$return .= $result;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (is_array($buttons) || (is_bool($buttons) && $buttons))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$buttons = $this->_subject->getButtons($name, $buttons, $asset, $author);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$return .= JLayoutHelper::render(\'joomla.editors.buttons\', $buttons);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return $return;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence extensionsEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Load the language file on instantiation.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  3.1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $autoloadLanguage = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//TODO: place code here");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence finderEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The plugin identifier.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $context = \'");
    String _name = plugin.getName();
    String _string = _name.toString();
    String _firstUpper = StringExtensions.toFirstUpper(_string);
    _builder.append(_firstUpper, "");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The extension name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $extension = \'com_");
    String _name_1 = plugin.getName();
    _builder.append(_name_1, "");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The sublayout to use when rendering the results.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $layout = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The type of content that the adapter indexes.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $type_title = \'\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The table name.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $table = \'#__");
    String _name_2 = plugin.getName();
    _builder.append(_name_2, "");
    _builder.append("\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The field the published state is stored in.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    string");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @not always an option");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $state_field = \'published\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Load the language file on instantiation.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  3.1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $autoloadLanguage = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Method to update the item link information when the item category is");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* changed. This is fired when the item category is published or unpublished");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* from the list view.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $extension  The extension whose category has been updated.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   array    $pks        An array of primary key ids of the content that has changed state.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   integer  $value      The value of the state that the content has been changed to.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onFinderCategoryChangeState($extension, $pks, $value)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Make sure we\'re handling com_names categories.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($extension == \'com_");
    String _name_3 = plugin.getName();
    _builder.append(_name_3, "\t");
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$this->categoryStateChange($pks, $value);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Method to remove the link information for items that have been deleted.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string  $context  The context of the action being performed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   JTable  $table    A JTable object containing the record to be deleted.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  boolean  True on success.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @throws  Exception on database error.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onFinderAfterDelete($context, $table)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($context == \'com_");
    String _name_4 = plugin.getName();
    _builder.append(_name_4, "\t");
    _builder.append(".article\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$id = $table->id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("elseif ($context == \'com_finder.index\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$id = $table->link_id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Remove the item from the index.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return $this->remove($id);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Smart Search after content save method.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Reindexes the link information for a weblink that has been saved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* It also makes adjustments if the access level of a weblink item or");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the category to which it belongs has been changed.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $context  The context of the content passed to the plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   JTable   $row      A JTable object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   boolean  $isNew    True if the content has just been created.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  boolean  True on success.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @throws  Exception on database error.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onFinderAfterSave($context, $row, $isNew)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// We only want to handle ");
    String _name_5 = plugin.getName();
    _builder.append(_name_5, "\t");
    _builder.append(" here. We need to handle front end and back end editing.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if ($context == \'com_");
    String _name_6 = plugin.getName();
    _builder.append(_name_6, "\t");
    _builder.append(".article\' || $context == \'com_");
    String _name_7 = plugin.getName();
    _builder.append(_name_7, "\t");
    _builder.append(".form\' )");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Check if the access levels are different.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!$isNew && $this->old_access != $row->access)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Process the change.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("$this->itemAccessChange($row);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Reindex the item.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$this->reindex($row->id);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Check for access changes in the category.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($context == \'com_categories.category\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Check if the access levels are different.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!$isNew && $this->old_cataccess != $row->access)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("$this->categoryAccessChange($row);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Smart Search before content save method.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This event is fired before the data is actually saved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $context  The context of the content passed to the plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   JTable   $row      A JTable object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   boolean  $isNew    True if the content is just about to be created.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  boolean  True on success.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @throws  Exception on database error.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onFinderBeforeSave($context, $row, $isNew)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// We only want to handle ");
    String _name_8 = plugin.getName();
    _builder.append(_name_8, "\t");
    _builder.append(" here.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if ($context == \'com_");
    String _name_9 = plugin.getName();
    _builder.append(_name_9, "\t");
    _builder.append(".article\' || $context == \'com_");
    String _name_10 = plugin.getName();
    _builder.append(_name_10, "\t");
    _builder.append(".form\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Query the database for the old access level if the item isn\'t new.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!$isNew)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("$this->checkItemAccess($row);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Check for access levels from the category.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($context == \'com_categories.category\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Query the database for the old access level if the item isn\'t new.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!$isNew)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("$this->checkCategoryAccess($row);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Method to update the link information for items that have been changed");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* from outside the edit screen. This is fired when the item is published,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* unpublished, archived, or unarchived from the list view.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string   $context  The context for the content passed to the plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   array    $pks      An array of primary key ids of the content that has changed state.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   integer  $value    The value of the state that the content has been changed to.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onFinderChangeState($context, $pks, $value)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// We only want to handle ");
    String _name_11 = plugin.getName();
    _builder.append(_name_11, "\t");
    _builder.append(" here.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if ($context == \'com_");
    String _name_12 = plugin.getName();
    _builder.append(_name_12, "\t");
    _builder.append(".article\' || $context == \'com_");
    String _name_13 = plugin.getName();
    _builder.append(_name_13, "\t");
    _builder.append(".form\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$this->itemStateChange($pks, $value);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Handle when the plugin is disabled.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($context == \'com_plugins.plugin\' && $value === 0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$this->pluginDisable($pks);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Method to index an item. The item must be a FinderIndexerResult object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string               $format  The item format.  Not used.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  void");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @throws  Exception on database error.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function index(FinderIndexerResult $item, $format = \'html\')");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Check if the extension is enabled");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (JComponentHelper::isEnabled($this->extension) == false)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->setLanguage();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Initialise the item parameters.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$registry = new JRegistry;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$registry->loadString($item->params);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->params = $registry;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$registry = new JRegistry;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$registry->loadString($item->metadata);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->metadata = $registry;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Build the necessary route and path information.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->url = $this->getURL($item->id, $this->extension, $this->layout);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->route = ");
    String _name_14 = plugin.getName();
    String _string_1 = _name_14.toString();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_string_1);
    _builder.append(_firstUpper_1, "\t");
    _builder.append("HelperRoute::getArticleRoute($item->slug, $item->catslug, $item->language);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("$item->path = FinderIndexerHelper::getContentPath($item->route);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Add the meta-data processing instructions based on the newsfeeds");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* configuration parameters.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Add the meta-author.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->metaauthor = $item->metadata->get(\'author\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Handle the link to the meta-data.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addInstruction(FinderIndexer::META_CONTEXT, \'link\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addInstruction(FinderIndexer::META_CONTEXT, \'metakey\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addInstruction(FinderIndexer::META_CONTEXT, \'metadesc\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addInstruction(FinderIndexer::META_CONTEXT, \'metaauthor\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addInstruction(FinderIndexer::META_CONTEXT, \'author\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addInstruction(FinderIndexer::META_CONTEXT, \'created_by_alias\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Add the type taxonomy data.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addTaxonomy(\'Type\', \'Web Link\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Add the category taxonomy data.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addTaxonomy(\'Category\', $item->category, $item->cat_state, $item->cat_access);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Add the language taxonomy data.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$item->addTaxonomy(\'Language\', $item->language);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Get content extras.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("FinderIndexerHelper::getContentExtras($item);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Index the item.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$this->indexer->index($item);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Method to setup the indexer to be run.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  boolean  True on success.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function setup()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Load dependent classes.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("require_once JPATH_SITE . \'/components/com_");
    String _name_15 = plugin.getName();
    _builder.append(_name_15, "\t");
    _builder.append("/helpers/route.php\';");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Method to get the SQL query used to retrieve the list of content items.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   mixed  $query  A JDatabaseQuery object or null.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  JDatabaseQuery  A database object.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   2.5");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected function getListQuery($query = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$db = JFactory::getDbo();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Check if we can use the supplied SQL query.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->select(\'a.id, a.catid, a.title, a.alias, a.url AS link, a.description AS summary\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->select(\'a.metakey, a.metadesc, a.metadata, a.language, a.access, a.ordering\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->select(\'a.created_by_alias, a.modified, a.modified_by\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->select(\'a.publish_up AS publish_start_date, a.publish_down AS publish_end_date\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->select(\'a.state AS state, a.created AS start_date, a.params\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->select(\'c.title AS category, c.published AS cat_state, c.access AS cat_access\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Handle the alias CASE WHEN portion of the query.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_item_alias = \' CASE WHEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_item_alias .= $query->charLength(\'a.alias\', \'!=\', \'0\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_item_alias .= \' THEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$a_id = $query->castAsChar(\'a.id\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_item_alias .= $query->concatenate(array($a_id, \'a.alias\'), \':\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_item_alias .= \' ELSE \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_item_alias .= $a_id . \' END as slug\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$query->select($case_when_item_alias);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_category_alias = \' CASE WHEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_category_alias .= $query->charLength(\'c.alias\', \'!=\', \'0\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_category_alias .= \' THEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$c_id = $query->castAsChar(\'c.id\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_category_alias .= $query->concatenate(array($c_id, \'c.alias\'), \':\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_category_alias .= \' ELSE \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when_category_alias .= $c_id . \' END as catslug\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$query->select($case_when_category_alias)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("->from(\'#__");
    String _name_16 = plugin.getName();
    _builder.append(_name_16, "\t\t");
    _builder.append(" AS a\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("->join(\'LEFT\', \'#__categories AS c ON c.id = a.catid\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return $query;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence quickiconsEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Load the language file on instantiation.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  3.1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $autoloadLanguage = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public function onGetIcons($context)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($context != $this->params->get(\'context\', \'mod_quickicon\') || !JFactory::getUser()->authorise(\'core.manage\', \'com_installer\'))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JHtml::_(\'jquery.framework\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//TODO: some code here");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$ajax_url = JUri::base() . \'index.php?option=com_installer&view=update&task=update.ajax\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//TODO: some code here");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JHtml::_(\'script\', \'plg_quickicon_");
    String _name = plugin.getName();
    _builder.append(_name, "\t");
    _builder.append("/");
    String _name_1 = plugin.getName();
    _builder.append(_name_1, "\t");
    _builder.append("check.js\', false, true);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return array(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("array(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'link\' => \'\',");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'image\' => \'\',");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'icon\' => \'\',");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'text\' => JText::_(\'PLG_QUICKICON_");
    String _name_2 = plugin.getName();
    String _string = _name_2.toString();
    String _upperCase = _string.toUpperCase();
    _builder.append(_upperCase, "\t\t\t");
    _builder.append("_CHECKING\'),");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("\'id\' => \'plg_quickicon_");
    String _name_3 = plugin.getName();
    _builder.append(_name_3, "\t\t\t");
    _builder.append("\',");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("\'group\' => \'MOD_QUICKICON_MAINTENANCE\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence searchEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Load the language file on instantiation.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  3.1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $autoloadLanguage = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determine areas searchable by this plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  array  An array of search areas.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   1.6");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onContentSearchAreas()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static $areas = array(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'");
    String _name = plugin.getName();
    _builder.append(_name, "\t\t");
    _builder.append("\' => \'PLG_");
    PluginKinds _type = plugin.getType();
    String _string = _type.toString();
    String _upperCase = _string.toUpperCase();
    _builder.append(_upperCase, "\t\t");
    _builder.append("_");
    String _name_1 = plugin.getName();
    String _string_1 = _name_1.toString();
    String _upperCase_1 = _string_1.toUpperCase();
    _builder.append(_upperCase_1, "\t\t");
    _builder.append("_");
    String _name_2 = plugin.getName();
    String _string_2 = _name_2.toString();
    String _upperCase_2 = _string_2.toUpperCase();
    _builder.append(_upperCase_2, "\t\t");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return $areas;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Search content (");
    String _name_3 = plugin.getName();
    _builder.append(_name_3, " ");
    _builder.append(").");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The SQL must return the following fields that are used in a common display");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* routine: href, title, section, created, text, browsernav");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string  $text      Target search string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string  $phrase    Matching option (possible values: exact|any|all).  Default is \"any\".");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   string  $ordering  Ordering option (possible values: newest|oldest|popular|alpha|category).  Default is \"newest\".");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param   mixed   $areas     An array if the search it to be restricted to areas or null to search all areas.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @return  array  Search results.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since   1.6");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public function onContentSearch($text, $phrase = \'\', $ordering = \'\', $areas = null)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$db = JFactory::getDbo();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$app = JFactory::getApplication();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$user = JFactory::getUser();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$groups = implode(\',\', $user->getAuthorisedViewLevels());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//not always used");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$searchText = $text;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (is_array($areas))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return array();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$sContent = $this->params->get(\'search_content\', 1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$sArchived = $this->params->get(\'search_archived\', 1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$limit = $this->params->def(\'search_limit\', 50);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$state = array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($sContent)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$state[] = 1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($sArchived)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$state[] = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (empty($state))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$text = trim($text);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($text == \'\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch ($phrase)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'exact\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'all\':");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'any\':");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch ($ordering)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'alpha\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'category\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'oldest\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'popular\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case \'newest\':");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$query = $db->getQuery(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// SQLSRV changes.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when = \' CASE WHEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when .= $query->charLength(\'a.alias\', \'!=\', \'0\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when .= \' THEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$a_id = $query->castAsChar(\'a.id\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when .= $query->concatenate(array($a_id, \'a.alias\'), \':\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when .= \' ELSE \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when .= $a_id . \' END as slug\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when1 = \' CASE WHEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when1 .= $query->charLength(\'c.alias\', \'!=\', \'0\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when1 .= \' THEN \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$c_id = $query->castAsChar(\'c.id\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when1 .= $query->concatenate(array($c_id, \'c.alias\'), \':\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when1 .= \' ELSE \';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$case_when1 .= $c_id . \' END as catslug\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$query->select(\'/*some code here*/\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("->from(\'#__");
    String _name_4 = plugin.getName();
    _builder.append(_name_4, "\t");
    _builder.append(" AS a\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//join is not always used");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("->join(\'INNER\', \'#__categories as c ON c.id = a.catid\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("->where(\'/*some code here*/\')");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("->order($order);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Filter by language.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($app->isSite() && JLanguageMultilang::isEnabled())");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$tag = JFactory::getLanguage()->getTag();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("$query->where(\'a.language in (\' . $db->quote($tag) . \',\' . $db->quote(\'*\') . \')\')");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("->where(\'c.language in (\' . $db->quote($tag) . \',\' . $db->quote(\'*\') . \')\');");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$db->setQuery($query, 0, $limit);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("$rows = $db->loadObjectList();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ($rows)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("foreach ($rows as $key => $row)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//TODO: place code here");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return $rows;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence systemEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//TODO: place code here");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence userEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Load the language file on instantiation.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @var    boolean");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @since  3.1");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("protected $autoloadLanguage = true;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//TODO: place code here");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xmlrpcEvents(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//TODO: place code here");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xmlContent(final Plugin plugin) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<extension version=\"3.1\" type=\"plugin\" group=\"");
    PluginKinds _type = plugin.getType();
    _builder.append(_type, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<name>");
    String _name = plugin.getName();
    _builder.append(_name, "\t");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Manifestation _manifest = plugin.getManifest();
    EList<Author> _authors = _manifest.getAuthors();
    CharSequence _generate = this.generate(_authors);
    _builder.append(_generate, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<creationDate>");
    Object _xifexpression = null;
    Manifestation _manifest_1 = plugin.getManifest();
    String _creationdate = _manifest_1.getCreationdate();
    boolean _notEquals = (!Objects.equal(_creationdate, null));
    if (_notEquals) {
      Manifestation _manifest_2 = plugin.getManifest();
      _xifexpression = _manifest_2.getCreationdate();
    } else {
      Calendar _instance = Calendar.getInstance();
      _xifexpression = Integer.valueOf(_instance.get(Calendar.YEAR));
    }
    _builder.append(_xifexpression, "\t");
    _builder.append("</creationDate>\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<copyright>");
    String _xifexpression_1 = null;
    Manifestation _manifest_3 = plugin.getManifest();
    String _copyright = _manifest_3.getCopyright();
    boolean _notEquals_1 = (!Objects.equal(_copyright, null));
    if (_notEquals_1) {
      Manifestation _manifest_4 = plugin.getManifest();
      _xifexpression_1 = _manifest_4.getCopyright();
    } else {
      _xifexpression_1 = "Copyright (C) 2005 - 2014 Open Source Matters. All rights reserved.";
    }
    _builder.append(_xifexpression_1, "\t");
    _builder.append("</copyright>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<license>");
    String _xifexpression_2 = null;
    Manifestation _manifest_5 = plugin.getManifest();
    String _license = _manifest_5.getLicense();
    boolean _notEquals_2 = (!Objects.equal(_license, null));
    if (_notEquals_2) {
      Manifestation _manifest_6 = plugin.getManifest();
      _xifexpression_2 = _manifest_6.getLicense();
    } else {
      _xifexpression_2 = "GPL 2.0";
    }
    _builder.append(_xifexpression_2, "\t");
    _builder.append("</license>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<version>");
    String _xifexpression_3 = null;
    Manifestation _manifest_7 = plugin.getManifest();
    String _version = _manifest_7.getVersion();
    boolean _notEquals_3 = (!Objects.equal(_version, null));
    if (_notEquals_3) {
      Manifestation _manifest_8 = plugin.getManifest();
      _xifexpression_3 = _manifest_8.getVersion();
    } else {
      _xifexpression_3 = "3.0.0";
    }
    _builder.append(_xifexpression_3, "\t");
    _builder.append("</version>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<description>");
    String _xifexpression_4 = null;
    Manifestation _manifest_9 = plugin.getManifest();
    String _description = _manifest_9.getDescription();
    boolean _notEquals_4 = (!Objects.equal(_description, null));
    if (_notEquals_4) {
      Manifestation _manifest_10 = plugin.getManifest();
      _xifexpression_4 = _manifest_10.getDescription();
    } else {
      _xifexpression_4 = "Place Description here";
    }
    _builder.append(_xifexpression_4, "\t");
    _builder.append("</description>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<files>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<filename plugin=\"");
    String _name_1 = plugin.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("\">");
    String _name_2 = plugin.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append(".php</filename>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<filename>index.html</filename>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</files>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<languages folder=\"language\">");
    _builder.newLine();
    {
      EList<Language> _languages = plugin.getLanguages();
      for(final Language lang : _languages) {
        _builder.append("\t\t");
        _builder.append("<language tag=\"");
        String _name_3 = lang.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\">");
        String _name_4 = lang.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(".");
        String _name_5 = plugin.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(".ini</language>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("<language tag=\"");
        String _name_6 = lang.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("\">");
        String _name_7 = lang.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(".plg_");
        PluginKinds _type_1 = plugin.getType();
        _builder.append(_type_1, "\t\t");
        _builder.append("_");
        String _name_8 = plugin.getName();
        _builder.append(_name_8, "\t\t");
        _builder.append(".sys.ini</language>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("</languages>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<config>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Config Section-->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</config>");
    _builder.newLine();
    _builder.append("</extension>");
    _builder.newLine();
    return _builder;
  }
}
