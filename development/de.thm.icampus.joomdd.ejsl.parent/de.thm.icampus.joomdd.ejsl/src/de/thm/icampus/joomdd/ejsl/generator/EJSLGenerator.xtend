/*
 * generated by Xtext
 */
package de.thm.icampus.joomdd.ejsl.generator

import com.google.inject.Inject
import de.thm.icampus.joomdd.ejsl.eJSL.CMSExtension
import de.thm.icampus.joomdd.ejsl.eJSL.EJSLModel
import de.thm.icampus.joomdd.ejsl.generator.ps.EntityGenerator
import de.thm.icampus.joomdd.ejsl.generator.ps.ExtensionGenerator
import de.thm.icampus.joomdd.ejsl.generator.ps.PageGenerator
import de.thm.icampus.joomdd.ejsl.ressourceTransformator.RessourceTransformer
import java.util.HashMap
import java.util.Map
import java.util.Properties
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.generator.OutputConfiguration
import org.eclipse.xtext.parser.IEncodingProvider
import org.eclipse.xtext.resource.IResourceServiceProvider
import de.thm.icampus.joomdd.ejsl.gui.ConfigGUI
import java.awt.EventQueue
import java.util.regex.Pattern
import java.util.regex.Matcher
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class EJSLGenerator extends AbstractGenerator {
	private JavaIoFileSystemAccess genData;
	public final static String DEFAULT_OUTPUT_ONCE = "DEFAULT_OUTPUT_ONCE";

	@Inject
	private IEncodingProvider encodingProvider;

	@Inject
	private IResourceServiceProvider.Registry registry;
	 
	 Properties config = new Properties()
	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		super.beforeGenerate(input, fsa, context)
		config = new Properties()
		if(registry.contentTypeToFactoryMap.get("serverpath") != null){
			println("here is the server")
			return
		}
		if(fsa.isFile("generator.properties"))
		 
		config.load(fsa.readBinaryFile("generator.properties"))
		else{
			defaultSettings(fsa)
		}
		
		
	}
	
	def defaultSettings(IFileSystemAccess2 fsa) {
		val ConfigGUI conf = new ConfigGUI
		EventQueue.invokeLater(new Runnable() {
			public override void run() {
				try {
					
					conf.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		while(conf.configList.empty){
			
		}
		config = conf.configList
		fsa.generateFile("generator.properties",getWriteProperties )
		
	}
	def CharSequence getWriteProperties() '''
	«FOR  prop  : config.keySet»
	«IF config.getProperty(prop as String).contains("\\") »
	  «prop»=«config.getProperty(prop as String).replaceAll(Pattern.quote("\\"), Matcher.quoteReplacement("\\\\"))»
	  «ELSE»
	  «prop»=«config.getProperty(prop as String)»
	  «ENDIF»
	«ENDFOR»
	'''
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		genData = new JavaIoFileSystemAccess(registry, encodingProvider)
	
		var String outputFolder
        if(registry.contentTypeToFactoryMap.get("serverpath") != null){
        	var Map<String, EList<String>> users = registry.contentTypeToFactoryMap.get("mddsessions") as Map<String,  EList<String>>
        	var act_user = "";
        	var String[] resourceNameArray = resource.URI.path.split("/")
        	var String filename = "";
        	for(i : 2..<resourceNameArray.size-1){
        		filename = filename + resourceNameArray.get(i) +"/"
        	}
        	filename = filename + resourceNameArray.last
        	println(filename)
        	for(String ssid : users.keySet){
        		var EList<String> value = users.get(ssid) as EList<String>
        		if(value.contains(filename))
        		  act_user = ssid
        	}
        	outputFolder = registry.contentTypeToFactoryMap.get("serverpath") as String + "/"+ act_user + "/src-gen"
        }else{
        outputFolder = config.getProperty("outputFolder")
        
        }

         println(outputFolder)
	  		
			genData.setOutputConfigurations(mapOutputConfigurations(outputFolder))	
				
   
		for ( e : resource.allContents.toIterable.filter(typeof(EJSLModel))) {
			
			var EJSLModel domainModel = e as EJSLModel ;
			
						
			switch(domainModel.ejslPart){
				CMSExtension:
				{
					
					var RessourceTransformer trans = new RessourceTransformer(e)
				
			 		trans.dotransformation
					var CMSExtension extensionPart = domainModel.ejslPart as CMSExtension
					
					var ExtensionGenerator mainExtensionGen = new ExtensionGenerator(extensionPart.extensions,"Extensions/", genData, domainModel.name, outputFolder)
					mainExtensionGen.dogenerate() 
					//if(config.getKey("entities").equalsIgnoreCase("true")){
					var EntityGenerator mainEntitiesGen = new EntityGenerator(extensionPart.feature.entities, "Entities/", genData, domainModel.name)
					mainEntitiesGen.dogenerate()
		
				//	}
				//	if(config.getKey("page").equalsIgnoreCase("true")){
					var PageGenerator mainPageGen = new PageGenerator(extensionPart.feature.pages,genData,"Pages/",domainModel.name)
				     mainPageGen.dogenerate()
				     
				     }
				}
			}
			
			fsa.generateFile("status","The code generation was successfull! \n Thank you for using this tool!")
	}
	
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		super.afterGenerate(input, fsa, context)
		fsa.generateFile("generator.properties",getWriteProperties )
		config = new Properties()
		
	}
	
	def Map<String, OutputConfiguration> mapOutputConfigurations(String path) {
		var OutputConfiguration defaultOutput = new OutputConfiguration(IFileSystemAccess2.DEFAULT_OUTPUT);
		defaultOutput.setDescription("Output Folder");
		defaultOutput.setOutputDirectory(path);
		defaultOutput.setOverrideExistingResources(true);
		defaultOutput.setCreateOutputDirectory(true);
		defaultOutput.setCleanUpDerivedResources(true);
		defaultOutput.setSetDerivedProperty(true);
		var Map<String, OutputConfiguration> mapconfig = new HashMap()
		mapconfig.put("DEFAULT_OUTPUT", defaultOutput)

		return mapconfig
	}
	
}
