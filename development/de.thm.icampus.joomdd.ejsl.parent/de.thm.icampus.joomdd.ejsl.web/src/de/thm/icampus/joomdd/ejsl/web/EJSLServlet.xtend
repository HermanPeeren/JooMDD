/*
 * generated by iCampus (JooMDD team) 2.9.1
 */
package de.thm.icampus.joomdd.ejsl.web

import com.google.inject.Provider
import java.io.IOException
import java.util.List
import java.util.Map
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import javax.servlet.ServletException
import javax.servlet.annotation.WebServlet
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.resource.IResourceServiceProvider
import org.eclipse.xtext.web.servlet.XtextServlet
import java.io.File
import javax.servlet.http.Cookie

/** 
 * Deploy this class into a servlet container to enable DSL-specific services.
 */
@WebServlet(name = 'XtextServices', urlPatterns = '/xtext-service/*')
class EJSLServlet extends XtextServlet {
	 
	val List<ExecutorService> executorServices = newArrayList
	

	var resourcesProvider = IResourceServiceProvider.Registry.INSTANCE
	
	
	override init() {
		super.init()
		println("init hier hallo!")
		val Provider<ExecutorService> executorServiceProvider = [Executors.newCachedThreadPool => [executorServices += it]]
		new EJSLWebSetup(executorServiceProvider).createInjectorAndDoEMFRegistration()
		
	}
	
	override destroy() {
		println("destroy server or session")
		executorServices.forEach[shutdown()]
		executorServices.clear()
		super.destroy()
	}
	
	override protected doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		var Map<String,EList<String>> users = resourcesProvider.contentTypeToFactoryMap.get("mddsessions") as Map<String,EList<String>>
		
		if(!checkCookies(req.cookies) || !users.containsKey(req.session.getAttribute("joomddusername"))){
			resp.sendError(404,"User not im System")
			return
		}
		
		var resource = req.getParameter("resource")
		println(resource)
		
		   
		super.doGet(req, resp)
		
	}
	
	def boolean checkCookies(Cookie[] cookies) {
		var boolean havename = false;
		var boolean haveemail = false
		for(Cookie cook: cookies){
			if(cook.name == "joomddusername" && cook.value != null)
			 havename = true
			 if(cook.name == "joomddemail" && cook.value != null)
			 haveemail = true
		}
		return havename && haveemail
	}
	
	override protected doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		var Map<String,Object> users = resourcesProvider.contentTypeToFactoryMap.get("mddsessions") as Map<String,Object>
		if(!checkCookies(req.cookies) || !users.containsKey(req.session.getAttribute("joomddusername"))){
			resp.sendError(404,"User not im System")
			return
		}
		
		super.doPost(req, resp)
		
	}
	
	override protected doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		var Map<String,Object> users = resourcesProvider.contentTypeToFactoryMap.get("mddsessions") as Map<String,Object>
		if(!checkCookies(req.cookies) || !users.containsKey(req.session.getAttribute("joomddusername"))){
			resp.sendError(404,"User not im System")
			return
		}
		
		super.doDelete(req, resp)
		
	}
	override protected doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		var Map<String,Object> users = resourcesProvider.contentTypeToFactoryMap.get("mddsessions") as Map<String,Object>
		if(!checkCookies(req.cookies) || !users.containsKey(req.session.getAttribute("joomddusername"))){
			resp.sendError(404,"User not im System")
			return
		}
		
		super.doPut(req, resp)
		
	}
	 
	
}
